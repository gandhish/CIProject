{
	"info": {
		"_postman_id": "c88dfac7-65e5-45b1-92e9-634442fd08e9",
		"name": "Ecomm Admin GraphQL API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DW",
			"item": [
				{
					"name": "Orders",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "OrderByID",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "Search Orders with a Blank ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `id` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n   \"id\": \"\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Search Orders with a NULL ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `id` is required.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n   \"id\": null\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Search Orders using ID with Invalid Datatype",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `id` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n   \"id\": \"null\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Search Orders with a valid ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('orderById');",
															"    pm.expect(jsonData.data.orderById).to.have.all.keys('emailAddress','locationName','cartItems','phoneNumber','handoffMode','orderNumber','status','submittedAt','subTotal','total','totalTax','name');",
															"    pm.expect(jsonData.data.orderById.cartItems).to.be.an('array');",
															"    pm.expect(jsonData.data.orderById.cartItems[0]).to.have.all.keys('totalPrice','unitPrice','quantity','productId','itemTax')",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Get all orders and their IDs",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query SearchOrders{searchOrders(skip: 0,take: 50,searchOrderModel: {firstName: \"\",lastName: \"\",status: \"\",handoffMode: \"\",locationId: \"\",phoneNumber: \"\",emailAddress: \"\",orderNumber: \"\",date: null},order: {customer: DESC }){items{id},totalCount}}'})};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    listOrders = [];",
															"    for(var i = 0; i<response.json().data.searchOrders.items.length;i++){",
															"        listOrders.push(response.json().data.searchOrders.items[i].id);",
															"    }",
															"    pm.variables.set(\"orderId\", listOrders[0]);",
															"});",
															"pm.sendRequest(postRequest, (error, response) => {",
															"",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
														"variables": "{\n   \"id\": \"{{orderId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "SearchOrders",
									"item": [
										{
											"name": "Search Orders with no filters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('searchOrders');",
															"    pm.expect(jsonData.data.searchOrders).to.have.all.keys('items','totalCount');",
															"     pm.expect(jsonData.data.searchOrders.items).to.be.an('array');",
															"    pm.expect(jsonData.data.searchOrders.items[0]).to.have.keys(\"id\", \"orderNumber\", \"handoffMode\", \"submittedTimestamp\",\"location\",\"customer\",\"phoneNumber\",\"total\");",
															"});",
															"",
															"pm.test(\"Validate the Content\", function () {",
															"   pm.expect(jsonData.data.searchOrders.items.length).to.not.eq(0)",
															"   pm.expect(jsonData.data.searchOrders.totalCount).to.not.eq(0)",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 50,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders SQL Injection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors', 'data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"    pm.expect(jsonData.data.searchOrders).to.be.null",
															"});",
															"",
															"pm.test(\"Validate the Error messages\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq(\"You cannot enter more then 10 digits.\");",
															"    pm.expect(jsonData.errors[1].message).to.eq(\"Invalid characters in location field.\");",
															"    pm.expect(jsonData.errors[2].message).to.eq(\"Please enter a valid email address.\");",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 50,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"delivery or 1=1;DROP table global.items\",\n  \"locationId\": \"delivery or 1=1;DROP table global.items\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"delivery or 1=1;DROP table global.items\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with invalid date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `date` got an invalid value.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": \"2020-99-04\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with Blank date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `date` got an invalid value.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": \"\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with Blank date (without variables)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors','data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq(\"One or more errors occurred. (DateTime cannot parse the given literal of type `StringValueNode`.)\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders {\n  searchOrders(\n    skip: 0\n    take: 50\n    searchOrderModel: {\n      firstName: \"\"\n      lastName: \"\"\n      status: \"\"\n      handoffMode: \"\"\n      locationId: \"\"\n      phoneNumber: \"\"\n      emailAddress: \"\"\n      orderNumber: \"\"\n      date: \"\"\n    }\n    order: { customer: DESC }\n  ) {\n    items {\n      id\n    }\n    totalCount\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with invalid Regex",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors','data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).includes('Invalid characters')",
															"    pm.expect(jsonData.data.searchOrders).to.be.null;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"$\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with invalid emailid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors','data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq('Please enter a valid email address.')",
															"    pm.expect(jsonData.data.searchOrders).to.be.null;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"abcd\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with invalid Phone Number",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors','data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Phone Number field.')",
															"    pm.expect(jsonData.data.searchOrders).to.be.null;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"111\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with incorrect Status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eql(\"Invalid order status specified.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total,\n      status\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"ABC\",\n  \"handoffMode\": \"\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search Orders with incorrect HandOffMode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate that no results are shown\", function () {",
															"    pm.expect(jsonData.data.searchOrders.totalCount).to.eq(0);",
															"    pm.expect(jsonData.data.searchOrders.items.length).to.eq(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query SearchOrders (\n  $skip: Int, \n  $take: Int,\n  $firstName: String,\n  $lastName: String,\n  $status: String,\n  $handoffMode: String,\n  $locationId: String,\n  $phoneNumber: String,\n  $emailAddress: String,\n  $orderNumber: String,\n  $date: DateTime\n  )\n{\n  searchOrders(\n    skip: $skip,\n    take: $take,\n    searchOrderModel: {\n      firstName: $firstName,\n      lastName: $lastName\n      status: $status\n      handoffMode: $handoffMode,\n      locationId: $locationId,\n      phoneNumber: $phoneNumber,\n      emailAddress: $emailAddress,\n      orderNumber: $orderNumber,\n      date: $date\n    },\n    order: {customer: DESC }\n  )\n  {\n    items{\n      id,\n      orderNumber,\n      handoffMode,\n      submittedTimestamp,\n      location,\n      customer,\n      phoneNumber,\n      total,\n      status\n    },\n    totalCount\n  }\n}\n",
														"variables": "{\n  \"skip\": 0, \n  \"take\": 5,\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"status\": \"\",\n  \"handoffMode\": \"ABC\",\n  \"locationId\": \"\",\n  \"phoneNumber\": \"\",\n  \"emailAddress\": \"\",\n  \"orderNumber\": \"\",\n  \"date\": null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Permissions",
									"item": [
										{
											"name": "Read Permissions",
											"item": [
												{
													"name": "SuperUser - Get Orders - Allowed",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Verify that atleast one record is retrieved\", function () {",
																	"    pm.expect(responseJson.data.searchOrders.items.length).to.greaterThan(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396 "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query SearchOrders\n{ searchOrders(\n    searchOrderModel: {\n      firstName: \"\"\n    }\n  )\n  {\n    items{\n      id\n    }\n  }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "SuperUser - OrderById - CustomerEmailAddress available",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"emailAddress field is accessible to the user\", function () {",
																	"    pm.expect(responseJson.data.orderById.emailAddress).contains(\"@\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396 ",
																	"",
																	"//Get an OrderId",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query SearchOrders{ searchOrders(searchOrderModel: {firstName: \"\"}){items{id}}}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    console.log(response.code);",
																	"    pm.variables.set(\"orderId\", response.json().data.searchOrders.items[0].id);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n    \"id\": \"{{orderId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "GlobalAdmin - GetOrders - Allowed",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Global admin user",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Global Admin user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Verify that atleast one record is retrieved\", function () {",
																	"    pm.expect(responseJson.data.searchOrders.items.length).to.greaterThan(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query SearchOrders\n{ searchOrders(\n    searchOrderModel: {\n      firstName: \"\"\n    }\n  )\n  {\n    items{\n      id\n    }\n  }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "GlobalAdmin - OrderById - CustomerEmail accessible",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Global admin user",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Global Admin user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"emailAddress field is accessible to the user\", function () {",
																	"    pm.expect(responseJson.data.orderById.emailAddress).contains(\"@\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n    \"id\": \"{{orderId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "BrandPartner - GetOrders - Allowed",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Brand Partner user",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Brand Partner user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Verify that atleast one record is retrieved\", function () {",
																	"    pm.expect(responseJson.data.searchOrders.items.length).to.greaterThan(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query SearchOrders\n{ searchOrders(\n    searchOrderModel: {\n      firstName: \"\"\n    }\n  )\n  {\n    items{\n      id\n    }\n  }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "BrandPartner - OrderById - EmailAddress not accessible",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Brand Partner user",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Brand Partner user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is null\", function () {",
																	"    pm.expect(responseJson.data.orderById.emailAddress).to.eql(null);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is not accessible\", function () {",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
																	"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n    \"id\": \"{{orderId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "CorporateUser - GetOrders - Allowed",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Corporate User",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Corporate user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Verify that atleast one record is retrieved\", function () {",
																	"    pm.expect(responseJson.data.searchOrders.items.length).to.greaterThan(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query SearchOrders\n{ searchOrders(\n    searchOrderModel: {\n      firstName: \"\"\n    }\n  )\n  {\n    items{\n      id\n    }\n  }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "CorporateUser - OrderById - EmailAddress not accessible",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Corporate User",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Corporate user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is null\", function () {",
																	"    pm.expect(responseJson.data.orderById.emailAddress).to.eql(null);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is not accessible\", function () {",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
																	"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n    \"id\": \"{{orderId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Team Member - GetOrders - Allowed",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization header to use the token for this user",
																	"    const postRequest1 = {",
																	"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"    method: 'POST',",
																	"    header: {",
																	"        'content-type': 'application/json'",
																	"    },",
																	"    body: {",
																	"        mode: 'urlencoded',",
																	"        urlencoded : [",
																	"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"        { key: 'grant_type', value: 'password'},",
																	"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
																	"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"        ]",
																	"    }",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Corporate user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"    pm.request.headers.add({",
																	"    key: \"Authorization\",",
																	"    value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Verify that atleast one record is retrieved\", function () {",
																	"    pm.expect(responseJson.data.searchOrders.items.length).to.greaterThan(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query SearchOrders\n{ searchOrders(\n    searchOrderModel: {\n      firstName: \"\"\n    }\n  )\n  {\n    items{\n      id\n    }\n  }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Team Member - OrderById - EmailAddress not accessible",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization header to use the token for this user",
																	"    const postRequest1 = {",
																	"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"    method: 'POST',",
																	"    header: {",
																	"        'content-type': 'application/json'",
																	"    },",
																	"    body: {",
																	"        mode: 'urlencoded',",
																	"        urlencoded : [",
																	"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"        { key: 'grant_type', value: 'password'},",
																	"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
																	"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"        ]",
																	"    }",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Corporate user",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"    pm.request.headers.add({",
																	"    key: \"Authorization\",",
																	"    value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is null\", function () {",
																	"    pm.expect(responseJson.data.orderById.emailAddress).to.eql(null);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is not accessible\", function () {",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
																	"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n    \"id\": \"{{orderId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Regional Admin - GetOrders - Allowed",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Regional Admin user",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Regional Admin",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Verify that atleast one record is retrieved\", function () {",
																	"    pm.expect(responseJson.data.searchOrders.items.length).to.greaterThan(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query SearchOrders\n{ searchOrders(\n    searchOrderModel: {\n      firstName: \"\"\n    }\n  )\n  {\n    items{\n      id\n    }\n  }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Regional Admin - OrderById - EmailAddress NOT accessible",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//Author: Sheetal",
																	"//User-Story: Ecomm-1396",
																	"  ",
																	"//Set the authorization to use the token for Regional Admin user",
																	"const postRequest1 = {",
																	"url: pm.environment.get(\"AdminUI_auth_URL\"),",
																	"method: 'POST',",
																	"header: {",
																	"    'content-type': 'application/json'",
																	"},",
																	"body: {",
																	"    mode: 'urlencoded',",
																	"    urlencoded : [",
																	"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
																	"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
																	"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
																	"    { key: 'grant_type', value: 'password'},",
																	"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
																	"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
																	"    ]",
																	"}",
																	"};",
																	"",
																	"//Setting the authorization to use the token for the Regional Admin",
																	"pm.sendRequest(postRequest1, (error, response1) => {",
																	"pm.request.headers.add({",
																	"key: \"Authorization\",",
																	"value: \"Bearer \"+ response1.json().access_token",
																	"});",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const responseJson = pm.response.json();",
																	"pm.test(\"Status code is 401\", function () {",
																	"    pm.response.to.have.status(401);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is null\", function () {",
																	"    pm.expect(responseJson.data.orderById.emailAddress).to.eql(null);",
																	"});",
																	"",
																	"pm.test(\"Verify that email is not accessible\", function () {",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
																	"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "\nquery GetOrderById($id: Uuid!) \n{\n  orderById(orderId: $id)\n  {\n    emailAddress,\n    locationName,\n    cartItems{\n      totalPrice,\n      unitPrice,\n      quantity,\n      productId,\n      itemTax\n    },\n    phoneNumber,\n    handoffMode,\n    orderNumber,\n    status,\n    submittedAt,\n    subTotal,\n    total,\n    totalTax,\n    name\n  }\n}",
																"variables": "{\n    \"id\": \"{{orderId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "GlobalCatalog - Items",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Create",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "Regex Validations",
													"item": [
														{
															"name": "Item - ItemName",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"Jamaican Chicken +-=|\\\\\\\"+!@#$%^&*()><,.?/';:\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}\n\n",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - Description",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Description field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy+-=+!@#$%^&*()<.,.?/';:\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - DescriptionAbbreviated",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Description Abbreviated field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - InternalName",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Internal Name field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - Multiple fields",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																			"    pm.expect(responseJson.errors[1].message).to.eql(\"Invalid characters in Internal Name field.\");",
																			"    pm.expect(responseJson.errors[2].message).to.eql(\"Invalid characters in Description field.\");",
																			"    pm.expect(responseJson.errors[3].message).to.eql(\"Invalid characters in Description Abbreviated field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"Jamaican Chicken +-=+!@#$%^&*()<.,.?/';:\",\n     internalName: \"Jerk Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     description: \"Spicy +-=+!@#$%^&*()<.,.?/';: Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gr+-=+!@#$%^&*()<.,.?/';:avy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - posID with invalid Regex",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json();",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"});",
																			"",
																			"pm.test(\"Validate content\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Pos Id field.')",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1@\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"ite \",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}\n\n",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Max Length Validations",
													"item": [
														{
															"name": "Item - ItemName",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"You cannot enter more then 250 characters.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"SedutperspiciatisundeomnisistenatuserrorsitvoluptatemaccusantiumdoloremquelaudantiumtotamremaperiameaqueipsaquaeabilloinventoreveritatisetquasiarchitectobeataevitaedictasuntexplicaboNemoenimipsamvoluptatemquiavolnowthisisaverylongtextmeanttotestthecha\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - InternalName",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"You cannot enter more then 250 characters.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"Sedu\",\n     internalName: \"tperspiciatisundeomnisistenatuserrorsitvoluptatemaccusantiumdoloremquelaudantiumtotamremaperiameaqueipsaquaeabilloinventoreveritatisetquasiarchitectobeataevitaedictasuntexplicaboNemoenimipsamvoluptatemquiavolnowthisisaverylongtextmeanttotestthechamach\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - Description",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"You cannot enter more then 250 characters.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk Chicken\",\n     description: \"SedutperspiciatisundeomnisistenatuserrorsitvoluptatemaccusantiumdoloremquelaudantiumtotamremaperiameaqueipsaquaeabilloinventoreveritatisetquasiarchitectobeataevitaedictasuntexplicaboNemoenimipsamvoluptatemquiavolnowthisisaverylongtextmeanttotestthecha\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - DescriptionAbbreviated",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"You cannot enter more then 250 characters.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk Chicken\",\n     description: \"Sedu\",\n     descriptionAbbreviated: \"JamatperspiciatisundeomnisistenatuserrorsitvoluptatemaccusantiumdoloremquelaudantiumtotamremaperiameaqueipsaquaeabilloinventoreveritatisetquasiarchitectobeataevitaedictasuntexplicaboNemoenimipsamvoluptatemquiavolnowthisisaverylongtextmeanttotestthecha\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   })\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Associate Modifier Groups",
											"item": [
												{
													"name": "200 - Create item",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var itemName = \"ItemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"itemName\", itemName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query ListModifierGroups{modifierGroups{items{__typename,id,name}}}'})",
																	"  };",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    listModifierGroups = [];",
																	"    for(var i = 0; i<response.json().data.modifierGroups.items.length;i++){",
																	"        listModifierGroups.push(response.json().data.modifierGroups.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"ingredientsList\", listModifierGroups);",
																	"    pm.variables.set(\"mg0\", listModifierGroups[0]);",
																	"    pm.variables.set(\"mg1\", listModifierGroups[1]);",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('AddCatalogItem');",
																	"    pm.expect(pm.response.json().data.AddCatalogItem).not.eq(null);",
																	"    pm.expect(pm.response.json().data.AddCatalogItem.length).to.eq(36);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"\n     itemPosSystems:[]\n     modifierGroupMappings:[{\n       id: \"00000000-0000-0000-0000-000000000000\",\n\t\t\t itemId: \"00000000-0000-0000-0000-000000000000\",\n\t\t\t modifierGroupId: \"{{mg0}}\"\n       },\n       {\n       id: \"00000000-0000-0000-0000-000000000000\",\n\t\t\t itemId: \"00000000-0000-0000-0000-000000000000\",\n\t\t\t modifierGroupId: \"{{mg1}}\"\n       }]\n     })\n   }\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Update item",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var itemName = \"ItemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"itemName\", itemName);",
																	"//var posid1 = pm.environment.get(\"POSId1\");",
																	"//var posid2 = pm.environment.get(\"POSId2\");",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query ListModifierGroups{modifierGroups{items{__typename,id,name}}}'})",
																	"  };",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    listModifierGroups = [];",
																	"    for(var i = 0; i<response.json().data.modifierGroups.items.length;i++){",
																	"        listModifierGroups.push(response.json().data.modifierGroups.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"modifierGroupList\", listModifierGroups);",
																	"    pm.variables.set(\"mg0\", listModifierGroups[0]);",
																	"    pm.variables.set(\"mg1\", listModifierGroups[1]);",
																	"    pm.variables.set(\"mg2\", listModifierGroups[2]);",
																	"    ",
																	"const postRequest1 = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item:{name:\"'+ pm.variables.get(\"itemName\") +'\",internalName: \"Jerk_Chicken 001\",description:\"Spicy-Chicken in (Jamaican) gravy!\",descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\", modifierGroupMappings:[{id: \"00000000-0000-0000-0000-000000000000\",itemId: \"00000000-0000-0000-0000-000000000000\", modifierGroupId:\"'+pm.variables.get(\"mg0\")+'\"}]})}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest1, (error, response) => {",
																	"    pm.variables.set(\"itemID\", response.json().data.AddCatalogItem);",
																	"})",
																	"    ",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('UpdateCatalogItem');",
																	"    pm.expect(jsonData.data.UpdateCatalogItem).to.have.all.keys('id','name','internalName','modifierGroupMappings')",
																	"    pm.expect(jsonData.data.UpdateCatalogItem.modifierGroupMappings[0]).to.have.all.keys('id','itemId','modifierGroupId') ",
																	"});",
																	"",
																	"pm.test(\"Validate updatecatalogitem details\", function () {",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.id).not.eq(null);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.id.length).to.eq(36);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.name).not.eq(null)",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.internalName).not.eq(null)",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.modifierGroupMappings[0].id).not.eq(null);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.modifierGroupMappings[0].id.length).to.eq(36);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.modifierGroupMappings[0].itemId).not.eq(null);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.modifierGroupMappings[0].itemId.length).to.eq(36);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.modifierGroupMappings[0].modifierGroupId).not.eq(null);",
																	"    pm.expect(pm.response.json().data.UpdateCatalogItem.modifierGroupMappings[0].modifierGroupId.length).to.eq(36);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  UpdateCatalogItem(item: {\n    id: \"{{itemID}}\",\n    name: \"Winter Special\",\n    internalName: \"24 Boneless Pack_\",\n    description: \"24 Boneless 4 Flavors Large Fries 2\",\n    descriptionAbbreviated: null,\n    itemPosSystems: [\n      {\n        posSystemId: \"{{POSId1}}\",\n        posId: \"ncr-123-78979475439\"\n      }\n    ],\n    modifierGroupMappings: [\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"{{itemID}}\",\n        modifierGroupId: \"{{mg1}}\"\n      },\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"{{itemID}}\",\n        modifierGroupId: \"{{mg2}}\"\n      }\n    ]\n  }){\n    id\n    name\n    internalName\n    modifierGroupMappings{\n      id\n      itemId\n      modifierGroupId\n    }\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Item - Create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data).to.have.all.keys('AddCatalogItem')",
															"});",
															"",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.AddCatalogItem).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query {posSystems{id}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"POSId1\", response.json().data.posSystems[0].id);",
															"    pm.variables.set(\"POSId2\", response.json().data.posSystems[1].id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(bug 1903) Item - Create Duplicate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"\n   })\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Update",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "Regex Validations",
													"item": [
														{
															"name": "Item - ItemName",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);",
																			"",
																			"const postRequest = {",
																			"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																			"  method: 'POST',",
																			"  header: {",
																			"    'Content-Type': 'application/json',",
																			"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																			"  },",
																			"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
																			"};",
																			"pm.sendRequest(postRequest, (error, response) => {",
																			"    console.log(response.code);",
																			"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {\n     id: \"{{itemId}}\",   \n     name: \"Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\"\n}){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - Description",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Description field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);",
																			"",
																			"const postRequest = {",
																			"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																			"  method: 'POST',",
																			"  header: {",
																			"    'Content-Type': 'application/json',",
																			"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																			"  },",
																			"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
																			"};",
																			"pm.sendRequest(postRequest, (error, response) => {",
																			"    console.log(response.code);",
																			"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {  \n    id: \"{{itemId}}\",     \n     name: \"Jamaican Chicken\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy+-=+!@#$%^&*()<.,.?/';:\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - DescriptionAbbreviated",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Description Abbreviated field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);",
																			"",
																			"const postRequest = {",
																			"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																			"  method: 'POST',",
																			"  header: {",
																			"    'Content-Type': 'application/json',",
																			"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																			"  },",
																			"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
																			"};",
																			"pm.sendRequest(postRequest, (error, response) => {",
																			"    console.log(response.code);",
																			"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n    id: \"{{itemId}}\", \n     name: \"Jamaican Chicken\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken+-=+!@#$%^&*()<.,.?/';:\"\n   })\n{\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - InternalName",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Internal Name field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);",
																			"",
																			"const postRequest = {",
																			"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																			"  method: 'POST',",
																			"  header: {",
																			"    'Content-Type': 'application/json',",
																			"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																			"  },",
																			"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
																			"};",
																			"pm.sendRequest(postRequest, (error, response) => {",
																			"    console.log(response.code);",
																			"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n    id: \"{{itemId}}\", \n     name: \"Jamaican Chicken\",\n     internalName: \"Jerk Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\"\n   })\n{\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - Multiple fields",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																			"    pm.expect(responseJson.errors[1].message).to.eql(\"Invalid characters in Internal Name field.\");",
																			"    pm.expect(responseJson.errors[2].message).to.eql(\"Invalid characters in Description field.\");",
																			"    pm.expect(responseJson.errors[3].message).to.eql(\"Invalid characters in Description Abbreviated field.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
																			"pm.variables.set(\"itemName\", itemName);",
																			"",
																			"const postRequest = {",
																			"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																			"  method: 'POST',",
																			"  header: {",
																			"    'Content-Type': 'application/json',",
																			"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																			"  },",
																			"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
																			"};",
																			"pm.sendRequest(postRequest, (error, response) => {",
																			"    console.log(response.code);",
																			"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {     \n    id: \"{{itemId}}\",   \n     name: \"Jamaican Chicken +-=+!@#$%^&*()<.,.?/';:\",\n     internalName: \"Jerk Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     description: \"Spicy +-=+!@#$%^&*()<.,.?/';: Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gr+-=+!@#$%^&*()<.,.?/';:avy Chicken\"\n   })\n{\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													]
												},
												{
													"name": "Required Fields Validations",
													"item": [
														{
															"name": "Item - Id required",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"`id` is a required field and cannot be null.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     name: \"Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\"\n}){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Item - Id QueryParam NOT Required",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Verify Correct Error Message\", function () {",
																			"    const responseJson = pm.response.json();",
																			"    pm.expect(responseJson.errors[0].message).to.eql(\"The argument `id` does not exist.\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation updateItem{\nUpdateCatalogItem(\n id: \"{{itemId}}\",\nitem: {    \n  id: \"{{itemId}}\",\n     name: \"Chicken+-=+!@#$%^&*()<.,.?/';:\",\n     internalName: \"Jerk Chicken\",\n     description: \"Spicy Chicken in Jamaican gravy\",\n     descriptionAbbreviated: \"Jamaican Gravy Chicken\"\n}){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n   }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Item description is blank",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"    pm.expect(jsonData.data).to.have.all.keys('UpdateCatalogItem');",
																			"    ",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation {\n  UpdateCatalogItem(item: {\n    id: \"f9eb72a0-c849-4dc3-a22d-78e3715c12da\",\n    name: \"Winter Special\",\n    internalName: \"24 Boneless Pack_\",\n    description: \"\",\n    descriptionAbbreviated: null,\n    itemPosSystems: [\n      {\n        posSystemId: \"c2fb5265-462e-4732-99bb-97488571604d\",\n        posId: \"ncr-123-78979475439\"\n      }\n    ],\n    modifierGroupMappings: [\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"ba7df76e-d582-4e02-88be-ae5192711f29\",\n        modifierGroupId: \"2d9d3df2-35f6-4a70-bdea-8d2e89576073\"\n      },\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"ba7df76e-d582-4e02-88be-ae5192711f29\",\n        modifierGroupId: \"cbff6e6b-b7a7-4934-8ace-2f9d189f506c\"\n      }\n    ]\n  }){\n    id\n    name\n    internalName\n    modifierGroupMappings{\n      id\n      itemId\n      modifierGroupId\n    }\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Item internal name is blank",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"    pm.expect(jsonData.data).to.have.all.keys('UpdateCatalogItem');",
																			"    ",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation {\n  UpdateCatalogItem(item: {\n    id: \"f9eb72a0-c849-4dc3-a22d-78e3715c12da\",\n    name: \"Winter Special\",\n    internalName: \"\",\n    description: \"24 Boneless 4 Flavors Large Fries 2\",\n    descriptionAbbreviated: null,\n    itemPosSystems: [\n      {\n        posSystemId: \"c2fb5265-462e-4732-99bb-97488571604d\",\n        posId: \"ncr-123-78979475439\"\n      }\n    ],\n    modifierGroupMappings: [\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"ba7df76e-d582-4e02-88be-ae5192711f29\",\n        modifierGroupId: \"2d9d3df2-35f6-4a70-bdea-8d2e89576073\"\n      },\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"ba7df76e-d582-4e02-88be-ae5192711f29\",\n        modifierGroupId: \"cbff6e6b-b7a7-4934-8ace-2f9d189f506c\"\n      }\n    ]\n  }){\n    id\n    name\n    internalName\n    modifierGroupMappings{\n      id\n      itemId\n      modifierGroupId\n    }\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Item name is blank",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"    pm.expect(jsonData.data).to.have.all.keys('UpdateCatalogItem');",
																			"    ",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation {\n  UpdateCatalogItem(item: {\n    id: \"f9eb72a0-c849-4dc3-a22d-78e3715c12da\",\n    name: \"\",\n    internalName: \"24 Boneless Pack_\",\n    description: \"24 Boneless 4 Flavors Large Fries 2\",\n    descriptionAbbreviated: null,\n    itemPosSystems: [\n      {\n        posSystemId: \"c2fb5265-462e-4732-99bb-97488571604d\",\n        posId: \"ncr-123-78979475439\"\n      }\n    ],\n    modifierGroupMappings: [\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"ba7df76e-d582-4e02-88be-ae5192711f29\",\n        modifierGroupId: \"2d9d3df2-35f6-4a70-bdea-8d2e89576073\"\n      },\n      {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        itemId: \"ba7df76e-d582-4e02-88be-ae5192711f29\",\n        modifierGroupId: \"cbff6e6b-b7a7-4934-8ace-2f9d189f506c\"\n      }\n    ]\n  }){\n    id\n    name\n    internalName\n    modifierGroupMappings{\n      id\n      itemId\n      modifierGroupId\n    }\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Item - Update - Invalid POS specified",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"Jamaican_Chicken\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    console.log(response.code);",
																	"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
																	"});",
																	"",
																	"const postRequest1 = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query {posSystems{id}}'})",
																	"};",
																	"pm.sendRequest(postRequest1, (error, response) => {",
																	"    pm.variables.set(\"POSId1\", response.json().data.posSystems[0].id);",
																	"    pm.variables.set(\"POSId2\", response.json().data.posSystems[1].id);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify that the item does not get updated\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"Not able to update catalog item. Please try again. If the problem persists, contact your system administrator.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"Jamaican_Chicken 001 UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n    itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"424f04a23fcd4596b1b5b80d1a9debd7\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Item - Update",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that the item gets updated\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.UpdateCatalogItem.id).to.eql(pm.variables.get(\"itemId\"));",
															"    pm.expect(responseJson.data.UpdateCatalogItem.name).to.eql(pm.variables.get(\"itemName\")+ \" UPDATED\");",
															"    pm.expect(responseJson.data.UpdateCatalogItem.description).contains(\" UPDATED\");",
															"    pm.expect(responseJson.data.UpdateCatalogItem.descriptionAbbreviated).contains(\" UPDATED\");",
															"});",
															"",
															"pm.test(\"Verify the JSON Structure\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.UpdateCatalogItem.itemPosSystems.length==2);",
															"    pm.expect(responseJson.data.UpdateCatalogItem.itemPosSystems[0]).to.have.all.keys('posId', 'posSystemId');",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.UpdateCatalogItem.itemPosSystems[0].posId).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"    pm.expect(responseJson.data.UpdateCatalogItem.itemPosSystems[1].posId).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"{{itemName}} UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n    itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Item - Update - Clear the POS Ids",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"",
															"//Creating an Item that has POS mappings",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\")+'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",  itemPosSystems:[{ posId:\"item-ncr-1\",  posSystemId:\"'+pm.environment.get(\"POSId1\")+'\"},{ posId:\"item-symp-1\", posSystemId:\"'+pm.environment.get(\"POSId2\")+'\"}]  })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that the item gets updated\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.UpdateCatalogItem.id).to.eql(pm.variables.get(\"itemId\"));",
															"});",
															"",
															"pm.test(\"Verify that the POS mappings are cleared\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.UpdateCatalogItem.itemPosSystems==[])",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"Jamaican 001 UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n    itemPosSystems:[]\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Item - Update using Variables",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify that the item gets updated\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.updatedItem.id).to.eql(pm.variables.get(\"itemId\"));",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateCatalogItem($item: UpdateCatalogItem!) { updatedItem: UpdateCatalogItem( item: $item) { __typename id name internalName description descriptionAbbreviated ... on ItemModel { id } } }",
														"variables": "{\n    \"item\": {\n    \"description\": \"sdfnds kldsjflkjdslkf jdaskfjlasdfsdfdfd lksjdfldsajf lkdsjfksd this one is updated\",\n\"descriptionAbbreviated\":\tnull,\n\"id\":\t\"{{itemId}}\",\n\"internalName\":\t\"sdjflkdsf jklsdf sdfdlsjkflksd fjklsd\",\n\"name\":\t\"{{itemName}}\"\n}}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Permissions",
							"item": [
								{
									"name": "Create Permissions",
									"item": [
										{
											"name": "SuperUser - CreateItem - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.AddCatalogItem).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - CreateItem - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.AddCatalogItem).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - CreateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - CreateItem - NOT Allowed Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - CreateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"      const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - CreateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createItem{\nAddCatalogItem(item: {     \n     name: \"{{itemName}}\",\n     internalName: \"Jerk_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy!\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\",\n     itemPosSystems:[\n        {\n          posId:\"item-ncr-1\",\n          posSystemId:\"{{POSId1}}\"\n        },\n        {\n          posId:\"item-symp-1\",\n          posSystemId:\"{{POSId2}}\"\n        }\n      ]\n\n   })\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update Permissions",
									"item": [
										{
											"name": "SuperUser - UpdateItem - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"//Create an item that can be updated later",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is udpated\", function () {",
															"    pm.expect(responseJson.data.UpdateCatalogItem.name).contains(\"UPDATED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"{{itemName}} UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - UpdateItem - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"  ",
															"//Create an item that can be updated later",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});",
															"",
															"//Set the authorization to use the token for Global admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is udpated\", function () {",
															"    pm.expect(responseJson.data.UpdateCatalogItem.name).contains(\"UPDATED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"{{itemName}} UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - UpdateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"  ",
															"//Create an item that can be updated later",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});",
															"  ",
															"//Set the authorization to use the token for Brand Partner user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"Jamaican_Chicken 001 UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - UpdateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"  ",
															"//Create an item that can be updated later",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});",
															"",
															"//Set the authorization to use the token for Corporate User",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"Jamaican_Chicken 001 UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - UpdateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"  ",
															"//Create an item that can be updated later",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});",
															"",
															"//Set the authorization header to use the token for this user",
															"    const postRequest1 = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"Jamaican_Chicken 001 UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - UpdateItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"itemName\", itemName);",
															"  ",
															"//Create an item that can be updated later",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
															"});",
															"",
															"//Set the authorization to use the token for Regional Admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateItem{\nUpdateCatalogItem(\nitem: {    \n     id: \"{{itemId}}\", \n     name: \"Jamaican_Chicken 001 UPDATED\",\n     internalName: \"Jerk_Chicken 001 UPDATED\",\n     description: \"Spicy-Chicken in (Jamaican) gravy UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken UPDATED! Designed by @Arthur^Willy%Meg%Ry*an\"\n   }){\n       id\n       name\n       internalName\n       description\n       descriptionAbbreviated\n       itemPosSystems{\n           posId\n           posSystemId\n       }\n   }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Read Permissions",
									"item": [
										{
											"name": "SuperUser - Get Items - Allowed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that atleast one record is retrieved\", function () {",
															"    pm.expect(responseJson.data.catalogItems.items.length).to.greaterThan(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"a\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - GetItem - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Global admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is retrieved\", function () {",
															"    pm.expect(responseJson.data.catalogItems.items.length).to.greaterThan(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"a\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - GetItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Brand Partner user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"a\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - GetItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Corporate User",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"a\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - GetItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization header to use the token for this user",
															"    const postRequest1 = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"a\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - GetItem - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Regional Admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"a\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "Validations",
									"item": [
										{
											"name": "Search - Record not found - no error - only an empty array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify the totalCount\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.catalogItems.totalCount).to.be.equal(0);",
															"});",
															"",
															"pm.test(\"Verify empty array\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.data.catalogItems.items).length==0",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"!@#$#@$#@$\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search - Bad Request - Incorrect field name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify the error message\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.errors[0].message).to.be.equal(\"The specified input object field `names` does not exist.\");",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{names : {contains: \"!@$#@!\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search - Bad Request - Incorrect field name in Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Verify the error message\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson.errors[0].message).to.be.equal(\"The field `names` does not exist on the type `ItemSearchModel`.\");",
															"});",
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"mnkl\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        names,\n        internalName\n      }\n      totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Item - Search using Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify the array has >0 records\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.data.catalogItems.items).length",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
													"pm.variables.set(\"itemName\", itemName);",
													"  ",
													"//Create an item that can be updated later",
													"const postRequest = {",
													"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"  },",
													"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\",  internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
													"};",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    console.log(response.code);",
													"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"itemName\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Search using InternalName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify the array has >0 records\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.data.catalogItems.items).length",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{internalName : {contains: \"Jerk\"}}]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Search using name and InternalName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify the array has >0 records\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.data.catalogItems.items).length",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query catalogItems($searchText: String!){\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [ { name: { like: $searchText } }, { internalName: { like: $searchText } } ]\n        }\n      order:{\n        name: DESC\n      }\n      ){\n      items{\n        id,\n        name,\n        internalName\n      }\n      totalCount\n    }\n}\n",
												"variables": "{\n    \"searchText\": \"itemName\"\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Search using Variables",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify the array has >0 records\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.data.catalogItems.items).length",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query SearchCatalogItems($skip: Int!, $take: Int!, $searchText: String!) { catalogItems(skip: $skip, take: $take, where: { name: { like: $searchText } }) { __typename items { __typename id name ... on ItemSearchModel { id } } totalCount } }",
												"variables": "{\n    \"searchText\": \"itemName\",\n    \"skip\":0,\n    \"take\":50\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Skip",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that the first item is skipped\", function () {",
													"    const responseJson = pm.response.json();",
													"    console.log(pm.variables.get(\"itemIdExcluded\"));",
													"    for (i=0; i < responseJson.data.catalogItems.items.length; i++) {",
													"    if (responseJson.data.catalogItems.items[i].id == pm.variables.get(\"itemIdExcluded\")){",
													"        pm.expect.fail();",
													"    }",
													"}",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const postRequest = {",
													"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"  },",
													"  body: JSON.stringify({query: 'query catalogItems{catalogItems(skip : 0,take : 10, where:{or: [{name : {contains: \"Jama\"}}]}order:{name: ASC}){items{id,name}totalCount}}'})};",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    console.log(response.code);",
													"    pm.variables.set(\"itemIdExcluded\", response.json().data.catalogItems.items[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query catalogItems{\n    catalogItems(\n      skip : 10\n      take : 10\n      where:{\n        or: [{name : {contains: \"Jama\"}}]\n        }\n      order:{\n        name: ASC\n      }\n      ){\n      items{\n        id,\n        name\n      }\n      totalCount\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Sorting",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var _ = require('lodash');",
													"pm.test('Item names are in sorted order', () => {",
													"    const responseJson = pm.response.json();",
													"    var expectedSortedOrder = _.orderBy(responseJson.data.catalogItems.items, ['name'],['asc']);",
													"    pm.expect(responseJson.data.catalogItems.items).to.eql(expectedSortedOrder);    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query catalogItems{\n    catalogItems(\n      skip : 0\n      take : 10\n      where:{\n        or: [{name : {contains: \"itemName\"}}]\n        }\n      order:{\n        name: ASC\n      }\n      ){\n      items{\n        id,\n        name\n      }\n      totalCount\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - SortCreate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\nLcreateItem: AddCatalogItem(item: {     \n     name: \"L_Jamaican_Chicken 001\",\n     internalName: \"JerkL_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken! Designed by @Arthur^Willy%Meg%Ry*an\"\n   })\n\nCcreateItem: AddCatalogItem(item: {     \n     name: \"C_Jamaican_Chicken 001\",\n     internalName: \"JerkC_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy! Designed by @Arthur^Willy%Meg%Ry*an\"\n   })\n\nHcreateItem: AddCatalogItem(item: {     \n     name: \"H_Jamaican_Chicken 001\",\n     internalName: \"JerkH_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken! Designed by @Arthur^Willy%Meg%Ry*an\"\n   })\n\nEcreateItem: AddCatalogItem(item: {     \n     name: \"E_Jamaican_Chicken 001\",\n     internalName: \"JerkE_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken! Designed by @Arthur^Willy%Meg%Ry*an\"\n   })\n\nBcreateItem: AddCatalogItem(item: {     \n     name: \"B_Jamaican_Chicken 001\",\n     internalName: \"JerkB_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken! Designed by @Arthur^Willy%Meg%Ry*an\"\n   })\n\nDcreateItem: AddCatalogItem(item: {     \n     name: \"D_Jamaican_Chicken 001\",\n     internalName: \"JerkD_Chicken 001\",\n     description: \"Spicy-Chicken in (Jamaican) gravy! Designed by @Arthur^Willy%Meg%Ry*an\",\n     descriptionAbbreviated: \"Jamaican (Gravy) Chicken! Designed by @Arthur^Willy%Meg%Ry*an\"\n   })\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Search by Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that the item is returned\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.data.itemById.id).to.eql(pm.variables.get(\"itemId\"));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var itemName = \"itemName\" + Math.floor((Math.random()*(9990+1))+1000);",
													"pm.variables.set(\"itemName\", itemName);",
													"",
													"const postRequest = {",
													"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"  },",
													"  body: JSON.stringify({query: 'mutation createItem{AddCatalogItem(item: { name: \"'+ pm.variables.get(\"itemName\") +'\", internalName:  \"Jerk_Chicken\", description: \"Spicy-Chicken in (Jamaican) gravy!\", descriptionAbbreviated: \"Jamaican (Gravy) Chicken!\"   })}'})",
													"};",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    console.log(response.code);",
													"    pm.variables.set(\"itemId\", response.json().data.AddCatalogItem);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetCatalogItemById($id: Uuid!) { itemById(id: $id) { __typename id name internalName description descriptionAbbreviated ... on ItemModel { id } } }",
												"variables": "{\n    \"id\": \"{{itemId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Item - Search by Id Incorrect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify that null is returned\", function () {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson.data.itemById).to.eql(null);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetCatalogItemById($id: Uuid!) { itemById(id: $id) { __typename id name internalName description descriptionAbbreviated ... on ItemModel { id } } }",
												"variables": "{\n    \"id\": \"7dfc35d5-0634-4732-98c0-aabbf111d908\"\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "RegionalCatalog",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "itemsByCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('itemsByCategory');",
													"    pm.expect(jsonData.data.itemsByCategory).to.be.an('array');",
													"    pm.expect(jsonData.data.itemsByCategory[0]).to.have.all.keys('categoryName','itemId','id','sortOrder' );",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "  query itemsByCategory{\n    itemsByCategory(categoryName:\"\"){\n    categoryName,\n    itemId,\n    id,\n    sortOrder\n    }\n  }",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "allCategoriesWithItems",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('allCategoriesWithItems');",
													"    pm.expect(jsonData.data.allCategoriesWithItems).to.be.an('array');",
													"    pm.expect(jsonData.data.allCategoriesWithItems[0]).to.have.all.keys('categoryName','items','count','description');",
													"    pm.expect(jsonData.data.allCategoriesWithItems[0].items).to.be.an('array');",
													"    pm.expect(jsonData.data.allCategoriesWithItems[0].items[0]).to.have.all.keys('id','name','internalName','description','descriptionAbbreviated','itemPosSystems');",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query allCategoriesWithItems\n{\n   allCategoriesWithItems\n   {\n     categoryName,\n     items{     \n       id,\n       name,\n       internalName,\n       description,\n       descriptionAbbreviated,\n       itemPosSystems{\n           posId,\n           posSystemId\n       }\n     },\n     count,\n     description\n   }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "allItemsWithCategories",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('allItemsWithCategories');",
													"    pm.expect(jsonData.data.allItemsWithCategories).to.be.an('array');",
													"    pm.expect(jsonData.data.allItemsWithCategories[0]).to.have.all.keys('name','itemId','categories' );",
													"    pm.expect(jsonData.data.allItemsWithCategories[0].categories).to.be.an('array');",
													"    pm.expect(jsonData.data.allItemsWithCategories[0].categories[0]).to.have.all.keys('id','categoryName');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetallItemsWithCategories{\n    allItemsWithCategories{\n       name,\n       itemId,\n        categories\n        {\n            id\n            categoryName\n        }\n    }\n}\n\n\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "searchGlobalItemsByIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('searchGlobalItemsByIds');",
													"    pm.expect(jsonData.data.searchGlobalItemsByIds).to.have.all.keys('count','items');",
													"    pm.expect(jsonData.data.searchGlobalItemsByIds.items).to.be.an('array');",
													"    pm.expect(jsonData.data.searchGlobalItemsByIds.items[0]).to.have.all.keys('id','name','internalName','isAssigned');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query test2($itemIds: [Uuid!])\n{\n    searchGlobalItemsByIds(itemIds:$itemIds){\n      count,\n      items\n      {\n          id,\n          name,\n          internalName,\n          isAssigned\n      }\n   }\n  }\n  \n ",
												"variables": "  {\n   \"itemIds\" :[\"e2ea1f22-7645-415c-96ea-365d293c32ab\",\"f13db260-5bcd-49fc-be83-c09133e3b479\"]\n  }"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Error 500 - searchGlobalItemsByIds with blank itemID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"    pm.expect(jsonData.errors[0].message).to.eq('Variable `itemIds` got an invalid value.')",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query test2($itemIds: [Uuid!])\n{\n    searchGlobalItemsByIds(itemIds:$itemIds){\n      count,\n      items\n      {\n        name,\n        internalName\n      }\n   }\n  }\n  \n ",
												"variables": "  {\n   \"itemIds\" :\"\"\n  }"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutation",
							"item": [
								{
									"name": "UpdateItemsMappingForCategory",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "UpdateItemsMappingForCategory - Assign multiple items to one category - Duplicate SortOrder",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"//Get all the regional items",
																	"const postRequestlistItems = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
																	"};",
																	"pm.sendRequest(postRequestlistItems, (error, response) => {",
																	"    listItems = [];",
																	"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
																	"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"currentItem\", listItems[0]);",
																	"    pm.variables.set(\"currentItem1\", listItems[1]);",
																	"    pm.variables.set(\"currentItem2\", listItems[2]);",
																	"})",
																	"//Get the categories",
																	"const postRequestlistCategories = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
																	"};",
																	"pm.sendRequest(postRequestlistCategories, (error, response) => {",
																	"    listCategories = [];",
																	"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
																	"        listCategories.push(response.json().data.categoryItems.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"currentCategory\", listCategories[0]);",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Verify Mapping\", function () {",
																	"    let isPresent = false;",
																	"    let isPresent1 = false;",
																	"    let isPresent2 = false;",
																	"    for (var i = 0; i < pm.response.json().data.updateItemsMappingForCategory.length; i++) {",
																	"        if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem\")){",
																	"            isPresent = true;",
																	"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(0);",
																	"        }    ",
																	"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem1\")){",
																	"            isPresent1 = true;",
																	"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(1);",
																	"        } ",
																	"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem2\")){",
																	"            isPresent2 = true;",
																	"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(2);",
																	"        }     ",
																	"    }",
																	"   pm.expect(isPresent).eql(true);",
																	"   pm.expect(isPresent1).eql(true);",
																	"   pm.expect(isPresent2).eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n    updateItemsMappingForCategory(mappings:[{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem1}}\"\n            sortOrder: 1\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem2}}\"\n            sortOrder: 2\n    }]){\n        id\n        categoryId\n        regionalItemId\n        sortOrder\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Assign same item twice",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"",
																	"//Get all the regional items",
																	"const postRequestlistItems = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
																	"};",
																	"pm.sendRequest(postRequestlistItems, (error, response) => {",
																	"    listItems = [];",
																	"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
																	"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"currentItem\", listItems[0]);",
																	"})",
																	"//Get the categories",
																	"const postRequestlistCategories = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
																	"};",
																	"pm.sendRequest(postRequestlistCategories, (error, response) => {",
																	"    listCategories = [];",
																	"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
																	"        listCategories.push(response.json().data.categoryItems.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"currentCategory\", listCategories[0]);",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Verify Mapping\", function () {",
																	"    let isPresent = false;",
																	"    let isPresent1 = false;",
																	"    let isPresent2 = false;",
																	"    for (var i = 0; i < pm.response.json().data.updateItemsMappingForCategory.length; i++) {",
																	"        if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem\")){",
																	"            isPresent = true;",
																	"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(0);",
																	"        }    ",
																	"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem1\")){",
																	"            isPresent1 = true;",
																	"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(1);",
																	"        } ",
																	"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem2\")){",
																	"            isPresent2 = true;",
																	"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(2);",
																	"        }     ",
																	"    }",
																	"   pm.expect(isPresent).eql(true);",
																	"   pm.expect(isPresent1).eql(true);",
																	"   pm.expect(isPresent2).eql(true);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n    updateItemsMappingForCategory(mappings:[{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 1\n    }]){\n        id\n        categoryId\n        regionalItemId\n        sortOrder\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Assign one item to one category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"regionalItemsList\", listItems);",
															"    pm.variables.set(\"currentItem\", pm.variables.get(\"regionalItemsList\")[0]);",
															"})",
															"//Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"})",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Verify Mapping\", function () {",
															"    let isPresent = false;",
															"    for (var i = 0; i < pm.response.json().data.updateItemsMappingForCategory.length; i++) {",
															"        if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem\")){",
															"            isPresent = true;",
															"            break;",
															"        }        ",
															"    }",
															"   pm.expect(isPresent).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n    updateItemsMappingForCategory(mappings:[{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    }]){\n        id\n        categoryId\n        regionalItemId\n        sortOrder\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign multiple items to one category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentItem\", listItems[0]);",
															"    pm.variables.set(\"currentItem1\", listItems[1]);",
															"    pm.variables.set(\"currentItem2\", listItems[2]);",
															"})",
															"//Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"})",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Verify Mapping\", function () {",
															"    let isPresent = false;",
															"    let isPresent1 = false;",
															"    let isPresent2 = false;",
															"    for (var i = 0; i < pm.response.json().data.updateItemsMappingForCategory.length; i++) {",
															"        if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem\")){",
															"            isPresent = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(0);",
															"        }    ",
															"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem1\")){",
															"            isPresent1 = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(1);",
															"        } ",
															"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem2\")){",
															"            isPresent2 = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(2);",
															"        }     ",
															"    }",
															"   pm.expect(isPresent).eql(true);",
															"   pm.expect(isPresent1).eql(true);",
															"   pm.expect(isPresent2).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n    updateItemsMappingForCategory(mappings:[{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem1}}\"\n            sortOrder: 1\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem2}}\"\n            sortOrder: 2\n    }]){\n        id\n        categoryId\n        regionalItemId\n        sortOrder\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign multiple items to multiple categories",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentItem\", listItems[0]);",
															"    pm.variables.set(\"currentItem1\", listItems[1]);",
															"    pm.variables.set(\"currentItem2\", listItems[2]);",
															"",
															"    //Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"    pm.variables.set(\"currentCategory1\", listCategories[1]);",
															"",
															"})",
															"",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Verify Mapping - Category1\", function () {",
															"    let isPresent = false;",
															"    let isPresent1 = false;",
															"    let isPresent2 = false;",
															"    for (var i = 0; i < 3; i++) {",
															"        if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem\")){",
															"            isPresent = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(0);",
															"        }    ",
															"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem1\")){",
															"            isPresent1 = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(1);",
															"        } ",
															"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem2\")){",
															"            isPresent2 = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(2);",
															"        }     ",
															"    }",
															"   pm.expect(isPresent).eql(true);",
															"   pm.expect(isPresent1).eql(true);",
															"   pm.expect(isPresent2).eql(true);",
															"});",
															"",
															"pm.test(\"Verify Mapping - Category2\", function () {",
															"    let isPresent = false;",
															"    let isPresent1 = false;",
															"    let isPresent2 = false;",
															"    for (var i = 3; i < 6; i++) {",
															"        if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem\")){",
															"            isPresent = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(0);",
															"        }    ",
															"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem1\")){",
															"            isPresent1 = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(1);",
															"        } ",
															"         if(pm.response.json().data.updateItemsMappingForCategory[i].regionalItemId===pm.variables.get(\"currentItem2\")){",
															"            isPresent2 = true;",
															"            pm.expect(pm.response.json().data.updateItemsMappingForCategory[i].sortOrder).to.eq(2);",
															"        }     ",
															"    }",
															"   pm.expect(isPresent).eql(true);",
															"   pm.expect(isPresent1).eql(true);",
															"   pm.expect(isPresent2).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n    updateItemsMappingForCategory(mappings:[{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem1}}\"\n            sortOrder: 1\n    },{\n            categoryId: \"{{currentCategory}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem2}}\"\n            sortOrder: 2\n    },{\n            categoryId: \"{{currentCategory1}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    },{\n            categoryId: \"{{currentCategory1}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem1}}\"\n            sortOrder: 1\n    },{\n            categoryId: \"{{currentCategory1}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem2}}\"\n            sortOrder: 2\n    }]){\n        id\n        categoryId\n        regionalItemId\n        sortOrder\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign more items to multiple categories - only the current should be passed in the request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentItem\", listItems[0]);",
															"    pm.variables.set(\"currentItem1\", listItems[1]);",
															"    pm.variables.set(\"currentItem2\", listItems[2]);",
															"",
															"    //Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"    pm.variables.set(\"currentCategory1\", listCategories[1]);",
															"    pm.variables.set(\"currentCategory2\", listCategories[2]);",
															"",
															"//Update items Mapping for category - assign items to one category",
															"const postRequestupatemapping = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation{updateItemsMappingForCategory(mappings:[{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",sortOrder: 0},{categoryId:\"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",sortOrder: 1},{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem2\") + '\",sortOrder: 2}]){id,categoryId,regionalItemId,sortOrder}}'})",
															"};",
															"pm.sendRequest(postRequestupatemapping, (error, response) => {",
															"    pm.expect(response.json().data.updateItemsMappingForCategory.length).to.eql(3);",
															"})",
															"",
															"})",
															"",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Verify Mappings - only the current ones should be saved\", function () {",
															"    pm.expect(pm.response.json().data.updateItemsMappingForCategory.length).to.eq(3);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n    updateItemsMappingForCategory(mappings:[{\n            categoryId: \"{{currentCategory1}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem}}\"\n            sortOrder: 0\n    },{\n            categoryId: \"{{currentCategory1}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem1}}\"\n            sortOrder: 1\n    },{\n            categoryId: \"{{currentCategory1}}\",id: \"00000000-0000-0000-0000-000000000000\"\n            regionalItemId: \"{{currentItem2}}\"\n            sortOrder: 2\n    }]){\n        id\n        categoryId\n        regionalItemId\n        sortOrder\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "categoryItems",
									"item": [
										{
											"name": "categoryItems - all categories and all their items",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentItem\", listItems[0]);",
															"    pm.variables.set(\"currentItem1\", listItems[1]);",
															"    pm.variables.set(\"currentItem2\", listItems[2]);",
															"",
															"    //Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"    pm.variables.set(\"currentCategory1\", listCategories[1]);",
															"",
															"//Update items Mapping for category - assign items to categories",
															"const postRequestupatemapping = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation{updateItemsMappingForCategory(mappings:[{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",sortOrder: 0},{categoryId:\"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",sortOrder: 1},{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem2\") + '\",sortOrder: 2},{categoryId: \"' + pm.variables.get(\"currentCategory1\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",sortOrder: 0},{categoryId: \"' + pm.variables.get(\"currentCategory1\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",sortOrder: 1},{categoryId: \"' + pm.variables.get(\"currentCategory1\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem2\") + '\",sortOrder: 2}]){id,categoryId,regionalItemId,sortOrder}}'})",
															"};",
															"pm.sendRequest(postRequestupatemapping, (error, response) => {",
															"    pm.expect(response.json().data.updateItemsMappingForCategory.length).greaterThan(5);",
															"})",
															"})",
															"",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function() {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function() {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('categoryItems');",
															"    pm.expect(jsonData.data.categoryItems.items[0]).to.have.all.keys('id', 'categoryName', 'sortOrder', 'count', 'regionalItems');",
															"    pm.expect(jsonData.data.categoryItems.items[0].regionalItems[0]).to.have.all.keys('id', 'name', 'internalName', 'description', 'descriptionAbbreviated', 'sortOrder');",
															"});",
															"",
															"pm.test(\"Validate the JSON contents\", function() {",
															"    listItemsCat1 = [];",
															"    listItemsCat2 = [];",
															"    for (var i = 0; i < jsonData.data.categoryItems.items.length; i++) {",
															"        if (jsonData.data.categoryItems.items[i].id === pm.variables.get(\"currentCategory\")) {",
															"            for (var j = 0; j < jsonData.data.categoryItems.items[i].regionalItems.length; j++) {",
															"                listItemsCat1.push(jsonData.data.categoryItems.items[i].regionalItems[j].id);",
															"            }",
															"            pm.expect(listItemsCat1).to.include(pm.variables.get(\"currentItem\")) && pm.expect(listItemsCat1).to.include(pm.variables.get(\"currentItem1\")) && pm.expect(listItemsCat1).to.include(pm.variables.get(\"currentItem2\"));",
															"",
															"        } else",
															"        if (jsonData.data.categoryItems.items[i].id === pm.variables.get(\"currentCategory1\")) {",
															"            for (var j = 0; j < jsonData.data.categoryItems.items[i].regionalItems.length; j++) {",
															"                listItemsCat2.push(jsonData.data.categoryItems.items[i].regionalItems[j].id);",
															"            }",
															"            pm.expect(listItemsCat2).to.include(pm.variables.get(\"currentItem\")) && pm.expect(listItemsCat2).to.include(pm.variables.get(\"currentItem1\")) && pm.expect(listItemsCat2).to.include(pm.variables.get(\"currentItem2\"));",
															"        }",
															"    }",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query GetCategoriesWithItems{\n    categoryItems{\n    items{\n        id,\n        categoryName,\n        sortOrder,\n        count,\n        regionalItems{\n            id,\n            name,\n            internalName,\n            description,\n            descriptionAbbreviated,\n            sortOrder\n        }\n    },\n    totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "categoryItems - Assign more items to multiple categories - previous ones should persist",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentItem\", listItems[0]);",
															"    pm.variables.set(\"currentItem1\", listItems[1]);",
															"    pm.variables.set(\"currentItem2\", listItems[2]);",
															"",
															"    //Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"    pm.variables.set(\"currentCategory1\", listCategories[1]);",
															"    pm.variables.set(\"currentCategory2\", listCategories[2]);",
															"",
															"//Update items Mapping for category - assign items to one category",
															"const postRequestupatemapping = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation{updateItemsMappingForCategory(mappings:[{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",sortOrder: 0},{categoryId:\"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",sortOrder: 1},{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem2\") + '\",sortOrder: 2}]){id,categoryId,regionalItemId,sortOrder}}'})",
															"};",
															"pm.sendRequest(postRequestupatemapping, (error, response) => {",
															"    pm.expect(response.json().data.updateItemsMappingForCategory.length).to.eql(3);",
															"",
															"//Assign items to one more category now - previous ones should persist",
															"const postRequestupatemapping1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation{updateItemsMappingForCategory(mappings:[{categoryId: \"' + pm.variables.get(\"currentCategory1\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",sortOrder: 0},{categoryId: \"' + pm.variables.get(\"currentCategory1\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",sortOrder: 1},{categoryId: \"' + pm.variables.get(\"currentCategory1\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem2\") + '\",sortOrder: 2}]){id,categoryId,regionalItemId,sortOrder}}'})",
															"};",
															"pm.sendRequest(postRequestupatemapping1, (error, response) => {",
															"    pm.expect(response.json().data.updateItemsMappingForCategory.length).to.eql(3);",
															"})",
															"})",
															"",
															"})",
															"",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the overall mappings\", function () {",
															"    for(var i = 0; i<pm.response.json().data.categoryItems.items.length;i++){",
															"        if(pm.response.json().data.categoryItems.items[i].id===pm.variables.get(\"currentCategory\"))",
															"        {",
															"            listItems = [];",
															"            for(var j = 0; j<pm.response.json().data.categoryItems.items[i].regionalItems.length;j++){",
															"                listItems.push(pm.response.json().data.categoryItems.items[i].regionalItems[j].id);",
															"            }",
															"            pm.expect(listItems).to.include(pm.variables.get(\"currentItem\"));",
															"            pm.expect(listItems).to.include(pm.variables.get(\"currentItem1\"));",
															"            pm.expect(listItems).to.include(pm.variables.get(\"currentItem2\"));",
															"            ",
															"        } else ",
															"           if(pm.response.json().data.categoryItems.items[i].id===pm.variables.get(\"currentCategory1\"))",
															"        {",
															"            listItems1 = [];",
															"            for(var j = 0; j<pm.response.json().data.categoryItems.items[i].regionalItems.length;j++){",
															"                listItems1.push(pm.response.json().data.categoryItems.items[i].regionalItems[j].id);",
															"            }",
															"            pm.expect(listItems1).to.include(pm.variables.get(\"currentItem\"));",
															"            pm.expect(listItems1).to.include(pm.variables.get(\"currentItem1\"));",
															"            pm.expect(listItems1).to.include(pm.variables.get(\"currentItem2\"));            ",
															"        }      ",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query GetCategoriesWithItems{\n    categoryItems{\n    items{\n        id,\n        categoryName,\n        sortOrder,\n        count,\n        regionalItems{\n            id,\n            name,\n            internalName,\n            description,\n            descriptionAbbreviated,\n            sortOrder\n        }\n    },\n    totalCount\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "categoryItemsById",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"//Get all the regional items",
															"const postRequestlistItems = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistItems, (error, response) => {",
															"    listItems = [];",
															"    for(var i = 0; i<response.json().data.searchGlobalItems.items.length;i++){",
															"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentItem\", listItems[0]);",
															"    pm.variables.set(\"currentItem1\", listItems[1]);",
															"    pm.variables.set(\"currentItem2\", listItems[2]);",
															"",
															"    //Get the categories",
															"const postRequestlistCategories = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: '{categoryItems{items{id}}}'})",
															"};",
															"pm.sendRequest(postRequestlistCategories, (error, response) => {",
															"    listCategories = [];",
															"    for(var i = 0; i<response.json().data.categoryItems.items.length;i++){",
															"        listCategories.push(response.json().data.categoryItems.items[i].id);",
															"    }",
															"    pm.variables.set(\"currentCategory\", listCategories[0]);",
															"",
															"//Update items Mapping for category - assign items to categories",
															"const postRequestupatemapping = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation{updateItemsMappingForCategory(mappings:[{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",sortOrder: 0},{categoryId:\"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",sortOrder: 1},{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem2\") + '\",sortOrder: 2}]){id,categoryId,regionalItemId,sortOrder}}'})",
															"};",
															"pm.sendRequest(postRequestupatemapping, (error, response) => {",
															"    pm.expect(response.json().data.updateItemsMappingForCategory.length).greaterThan(2);",
															"})",
															"})",
															"",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function() {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function() {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('categoryItemsById');",
															"    pm.expect(jsonData.data.categoryItemsById).to.have.all.keys('categoryId', 'categoryName', 'regionalItems');",
															"    pm.expect(jsonData.data.categoryItemsById.regionalItems[0]).to.have.all.keys('id', 'name', 'internalName', 'sortOrder', 'isMapped');",
															"});",
															"",
															"pm.test(\"Validate the JSON contents\", function() {",
															"    let isPresent = false;",
															"    let isPresent1 = false;",
															"    let isPresent2 = false;",
															"    for (var i = 0; i < pm.response.json().data.categoryItemsById.regionalItems.length; i++) {",
															"        if (pm.response.json().data.categoryItemsById.regionalItems[i].id === pm.variables.get(\"currentItem\")) {",
															"            isPresent = true;",
															"            pm.expect(pm.response.json().data.categoryItemsById.regionalItems[i].isMapped).to.be.true;",
															"        }",
															"        if (pm.response.json().data.categoryItemsById.regionalItems[i].id === pm.variables.get(\"currentItem1\")) {",
															"            isPresent1 = true;",
															"            pm.expect(pm.response.json().data.categoryItemsById.regionalItems[i].isMapped).to.be.true;",
															"        }",
															"        if (pm.response.json().data.categoryItemsById.regionalItems[i].id === pm.variables.get(\"currentItem2\")) {",
															"            isPresent2 = true;",
															"            pm.expect(pm.response.json().data.categoryItemsById.regionalItems[i].isMapped).to.be.true;",
															"        }",
															"    }",
															"    pm.expect(isPresent).eql(true);",
															"    pm.expect(isPresent1).eql(true);",
															"    pm.expect(isPresent2).eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query GetCategoriesWithItems($id: Uuid!){\n    categoryItemsById(categoryId: $id){\n        categoryId,\n        categoryName,\n        regionalItems{\n            id,\n            name,\n            internalName,\n            sortOrder,\n            isMapped\n        }\n    }\n}",
														"variables": "{\n    \"id\":\"{{currentCategory}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Regional Category",
							"item": [
								{
									"name": "Add Regional Category",
									"item": [
										{
											"name": "200 - add new category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var catName = \"Category\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"catName\", catName);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('addCategory');",
															"    pm.expect(jsonData.data.addCategory).to.have.all.keys('id', 'categoryName', 'sortOrder');",
															"});",
															"",
															"pm.test(\"Validate JSON contents\", function () {",
															"    pm.expect(jsonData.data.addCategory.categoryName).to.eq(pm.variables.get(\"catName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  addCategory(\n      categoryName:\"{{catName}}\"\n    )\n        {\n          id,\n          categoryName,\n          sortOrder\n      }  \n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - add new category with duplicate name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var catName = \"Category\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"catName\", catName);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON contents\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq(\"Unable to save Category. Please try again. If the problem persists, contact your system administrator.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  addCategory(\n      categoryName:\"catName\"\n    )\n        {\n          id,\n          categoryName,\n          sortOrder\n      }  \n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Edit Regional Category",
									"item": [
										{
											"name": "200 - edit Category",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var catName = \"Category\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"catName\", catName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {addCategory(categoryName:\"'+catName+'\"){id,categoryName,sortOrder}}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"catID\", response.json().data.addCategory.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('updateCategory');",
															"    pm.expect(jsonData.data.updateCategory).to.have.all.keys('id', 'categoryName', 'sortOrder');",
															"});",
															"",
															"pm.test(\"Validate JSON contents\", function () {",
															"    pm.expect(jsonData.data.updateCategory.categoryName).to.eq(pm.variables.get(\"catName\"));",
															"    pm.expect(jsonData.data.updateCategory.id).to.eq(pm.variables.get(\"catID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateCategory{\n  updateCategory(\n    category:{\n      id:\"{{catID}}\"\n      categoryName:\"{{catName}}\"\n    }\n  )\n  {\n    id,\n    categoryName,\n    sortOrder\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Fraudulent",
					"item": [
						{
							"name": "Mutation",
							"item": [
								{
									"name": "Domain",
									"item": [
										{
											"name": "Status 200/500 - Create Domain - Invalid regex",
											"item": [
												{
													"name": "Status 200 - Create Domain - Invalid Domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Please enter a valid domain.')",
																	"    pm.expect(jsonData.data.createBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":{\"domain\":\"Domain\",\n  \"type\":\"Domain\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 200 - Create Domain - Invalid Type",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('The field Type is invalid.')",
																	"    pm.expect(jsonData.data.createBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":{\"domain\":\"Domain5.Com\",\n  \"type\":\"XYZ\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 200 - Create Domain - Invalid Notes",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Notes.')",
																	"    pm.expect(jsonData.data.createBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":{\"domain\":\"Domain5.Com\",\n  \"type\":\"Domain\",\n  \"notes\":\"testing$$$\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Invalid Date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Variable `fraudModel` got an invalid value.')",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":{\"domain\":\"Domain5.Com\",\n  \"type\":\"Domain\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-99-06\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Invalid ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Variable `fraudModel` got an invalid value.')",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":{\"domain\":\"Domain5.Com\",\n  \"type\":\"Domain\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"test\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Status 500 - Create Domain - Null keys",
											"item": [
												{
													"name": "Status 500 - Create Domain - NULL domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Domain is required.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":null,\n      \"type\":\"Domain\",\n      \"notes\":\"testing\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - NULL Type",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":null,\n      \"notes\":\"testing\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - NULL Notes",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":\"Domain\",\n      \"notes\":null,\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - NULL Date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing API\",\n      \"createdDate\":null,\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - NULL ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing API\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":null\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Status 200/500 - Create Domain - Blank keys",
											"item": [
												{
													"name": "Status 200 - Create Domain - Blank domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Domain is required.')",
																	"    pm.expect(jsonData.data.createBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 200 - Create Domain - Blank Type",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Type is required.')",
																	"    pm.expect(jsonData.data.createBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":\"\",\n      \"notes\":\"testing\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 200 - Create Domain - Blank Notes",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('Notes is required.')",
																	"    pm.expect(jsonData.data.createBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":\"Domain\",\n      \"notes\":\"\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Blank Date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123.com\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing API\",\n      \"createdDate\":\"\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Blank ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing API\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Status 500 - Create Domain - Incorrect field type",
											"item": [
												{
													"name": "Status 500 - Create Domain - Incorrect field type for Domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":1234,\n      \"type\":\"Domain\",\n      \"notes\":\"testing\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Incorrect field type for Type",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123\",\n      \"type\":1234,\n      \"notes\":\"testing\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Incorrect field type for Notes",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123\",\n      \"type\":\"Domain\",\n      \"notes\":1234,\n      \"createdDate\":\"2021-10-06\",\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Incorrect field type for Date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing API\",\n      \"createdDate\":1236,\n      \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 500 - Create Domain - Incorrect field type for ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 500\", function () {",
																	"    pm.response.to.have.status(500);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Variable `fraudModel` got an invalid value.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
																"variables": "{\n  \"fraudModel\":\n  {\n      \"domain\":\"Domain123\",\n      \"type\":\"Domain\",\n      \"notes\":\"testing API\",\n      \"createdDate\":\"2021-10-06\",\n      \"id\":1236\n  }\n} "
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Create Domain",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('createBlackList');",
															"    pm.expect(jsonData.data.createBlackList).to.have.all.keys('id', 'domain', 'email', 'createdDate', 'type', 'notes');",
															"});",
															"",
															"pm.test(\"Validate content\", function () {",
															"    pm.expect(jsonData.data.createBlackList.domain).to.eq(pm.variables.get(\"domain_name\").toLowerCase());",
															"    pm.expect(jsonData.data.createBlackList.email).to.be.null;",
															"    pm.expect(jsonData.data.createBlackList.type).to.eq(\"Domain\");",
															"    pm.expect(jsonData.data.createBlackList.notes).to.eq(\"testing\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var Dno = Math.floor((Math.random()*(9990+1))+1000);",
															"var domain_name = \"Domain\".concat(Dno,\".com\");",
															"pm.variables.set(\"domain_name\", domain_name);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
														"variables": "{\n  \"fraudModel\":{\"domain\":\"{{domain_name}}\",\n  \"type\":\"Domain\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status 200 - Create Domain - Duplicate Domain Name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var Dno = Math.floor((Math.random()*(9990+1))+1000);",
															"var domain_name = \"Domain\".concat(Dno,\".com\");",
															"pm.variables.set(\"domain_name\", domain_name);",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"",
															"    body: JSON.stringify({query: 'mutation ABC{createBlackList(fraudModel: {domain:\"'+domain_name+'\", type:\"Domain\", notes:\"testing\",createdDate:\"2021-10-06 14:55:53.70153+00\",id:\"00000000-0000-0000-0000-000000000000\"}){id, domain, email, createdDate, type, notes} }'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors','data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq('Unable to save Domain. Please try again. If the problem persists, contact your system administrator.')",
															"    pm.expect(jsonData.data.createBlackList).to.be.null;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}\n",
														"variables": "{\n  \"fraudModel\":{\"domain\":\"{{domain_name}}\",\n  \"type\":\"Domain\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status 200 - Create Domain - Incorrect Type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('errors','data');",
															"    pm.expect(jsonData.errors).to.be.an('array');",
															"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
															"});",
															"",
															"pm.test(\"Validate the Error message\", function () {",
															"    pm.expect(jsonData.errors[0].message).to.eq('The field Type is invalid.')",
															"    pm.expect(jsonData.data.createBlackList).to.be.null;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createBlackList($fraudModel : FraudModelInput){\n  createBlackList(fraudModel:$fraudModel)\n    {\n    id\n    domain\n    email\n    createdDate\n    type\n    notes\n  } \n}",
														"variables": "{\n  \"fraudModel\":{\"domain\":\"Domain5.Com\",\n  \"type\":\"Random\",\n  \"notes\":\"testing\",\n  \"createdDate\":\"2021-10-06 14:55:53.70153+00\",\n  \"id\":\"00000000-0000-0000-0000-000000000000\"\n  }\n} "
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Query",
							"item": [
								{
									"name": "Domain",
									"item": [
										{
											"name": "filterBlackListDomain",
											"item": [
												{
													"name": "filterBlackListDomain",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var Dno = Math.floor((Math.random()*(9990+1))+1000);",
																	"var domain_name = \"Domain\".concat(Dno,\".com\");",
																	"pm.variables.set(\"domain_name\", domain_name);",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"",
																	"    body: JSON.stringify({query: 'mutation ABC{createBlackList(fraudModel: {domain:\"'+domain_name+'\", type:\"Domain\", notes:\"testing\",createdDate:\"2021-10-06 14:55:53.70153+00\",id:\"00000000-0000-0000-0000-000000000000\"}){id, domain, email, createdDate, type, notes} }'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('filterBlackListDomain');",
																	"    pm.expect(jsonData.data.filterBlackListDomain).to.have.all.keys('frauds', 'count');",
																	"    pm.expect(jsonData.data.filterBlackListDomain.frauds).to.be.an('array');",
																	"    pm.expect(jsonData.data.filterBlackListDomain.frauds[0]).to.have.all.keys('createdDate','domain','id','notes','type');",
																	"});",
																	"",
																	"pm.test(\"Validate the Content\", function () {",
																	"    const fraud_domain = jsonData.data.filterBlackListDomain.frauds.find",
																	"      (m => m.domain === pm.variables.get(\"domain_name\").toLowerCase());",
																	"      pm.expect(fraud_domain.notes).to.eq('testing');",
																	"      pm.expect(fraud_domain.type).to.eq('Domain');",
																	"    pm.expect(jsonData.data.filterBlackListDomain.count).to.not.eq(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query {\n  filterBlackListDomain{\n    frauds {\n      createdDate\n      id\n      notes\n      type\n      domain\n    },\n    count\n  }\n}\n\n\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "filterBlackListEmail",
											"item": [
												{
													"name": "filterBlackListEmail",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('filterBlackListEmail');",
																	"    pm.expect(jsonData.data.filterBlackListEmail).to.have.all.keys('frauds', 'count');",
																	"    pm.expect(jsonData.data.filterBlackListEmail.frauds).to.be.an('array');",
																	"    pm.expect(jsonData.data.filterBlackListEmail.frauds[0]).to.have.all.keys('createdDate','email','id','notes','type');",
																	"});",
																	"",
																	"pm.test(\"Validate the Content\", function () {",
																	"    const fraud_email = jsonData.data.filterBlackListEmail.frauds.find",
																	"      (m => m.email === pm.variables.get(\"emailaddress\"));",
																	"      pm.expect(fraud_email.notes).to.eq('Fraud Email');",
																	"      pm.expect(fraud_email.type).to.eq('Email');",
																	"    pm.expect(jsonData.data.filterBlackListEmail.count).to.not.eq(0);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var randomNUM = Math.floor((Math.random()*(9990+1))+1000);",
																	"var emailaddress = \"email\".concat(randomNUM,\"@ca.com\");",
																	"pm.variables.set(\"emailaddress\", emailaddress);",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"",
																	"    body: JSON.stringify({query: 'mutation ABC{createBlackList(fraudModel: {email:\"'+emailaddress+'\", type:\"Email\", notes:\"Fraud Email\",createdDate:\"2021-10-06 14:55:53.70153+00\",id:\"00000000-0000-0000-0000-000000000000\"}){id, domain, email, createdDate, type, notes} }'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query {\n  filterBlackListEmail{\n    frauds {\n      createdDate\n      id\n      notes\n      type\n      email\n    },\n    count\n  }\n} ",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "checkBlackList",
											"item": [
												{
													"name": "Status 400 - checkBlackList - NULL Keys",
													"item": [
														{
															"name": "Status 400 - checkBlackList - Domain NULL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('Domain is required.')",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:null,\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Status 400 - checkBlackList - FraudType NULL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message', 'locations', 'path', 'extensions');",
																			"",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('`type` is a required field and cannot be null.');",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"domain\"\n      type:null\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Status 200 - checkBlackList - Blank Keys",
													"item": [
														{
															"name": "Status 200 - checkBlackList - Domain Blank",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('Domain is required.')",
																			"    pm.expect(jsonData.data.checkBlackList).to.be.null;",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"\"\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Status 200 - checkBlackList - FraudType Blank",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('Type is required.')",
																			"    pm.expect(jsonData.data.checkBlackList).to.be.null;",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"domain6893.com\"\n      type:\"\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Status 200 - checkBlackList - Invalid Regex",
													"item": [
														{
															"name": "Status 200 - checkBlackList - Domain Invalid Regex",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('Please enter a valid domain.')",
																			"    pm.expect(jsonData.data.checkBlackList).to.be.null;",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"test$$.com\"\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Status 200 - checkBlackList - FraudType Regex",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('The field Type is invalid.')",
																			"    pm.expect(jsonData.data.checkBlackList).to.be.null;",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"domain6893.com\"\n      type:\"$$\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Status 200 - checkBlackList - Invalid Domain",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('Please enter a valid domain.')",
																			"    pm.expect(jsonData.data.checkBlackList).to.be.null;",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"RandomDomain\"\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Status 400 - checkBlackList - Invalid field type",
													"item": [
														{
															"name": "Status 400 - checkBlackList - Domain Invalid fieldtype",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message', 'locations', 'path', 'extensions');",
																			"",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('The specified value type of field `domain` does not match the field type.')",
																			"    pm.expect(jsonData.errors[0].path).to.have.members([\"checkBlackList\"])",
																			"    pm.expect(jsonData.errors[0].extensions.fieldName).to.eq('domain')",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:1265\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Status 400 - checkBlackList - FraudType invalid fieldtype",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const jsonData = pm.response.json(); ",
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Validate JSON structure\", function () {",
																			"    pm.expect(jsonData).to.have.all.keys('errors');",
																			"    pm.expect(jsonData.errors).to.be.an('array');",
																			"    pm.expect(jsonData.errors[0]).to.have.all.keys('message', 'locations', 'path', 'extensions');",
																			"",
																			"});",
																			"",
																			"pm.test(\"Validate the Error message\", function () {",
																			"    pm.expect(jsonData.errors[0].message).to.eq('The specified value type of field `type` does not match the field type.')",
																			"    pm.expect(jsonData.errors[0].path).to.have.members([\"checkBlackList\"])",
																			"    pm.expect(jsonData.errors[0].extensions.fieldName).to.eq('type')",
																			"});",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"domain6893.com\"\n      type:123\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																		"variables": ""
																	}
																},
																"url": {
																	"raw": "{{AdminUI_GraphQLAPI_Url}}",
																	"host": [
																		"{{AdminUI_GraphQLAPI_Url}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "checkBlackList - Domain present",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var Dno = Math.floor((Math.random()*(9990+1))+1000);",
																	"var domain_name = \"Domain\".concat(Dno,\".com\");",
																	"pm.variables.set(\"domain_name\", domain_name);",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"",
																	"    body: JSON.stringify({query: 'mutation ABC{createBlackList(fraudModel: {domain:\"'+domain_name+'\", type:\"Domain\", notes:\"testing\",createdDate:\"2021-10-06 14:55:53.70153+00\",id:\"00000000-0000-0000-0000-000000000000\"}){id, domain, email, createdDate, type, notes} }'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('checkBlackList');",
																	"    pm.expect(jsonData.data.checkBlackList).to.have.all.keys('domainIsBlacklisted', 'emailIsBlacklisted');",
																	"});",
																	"",
																	"pm.test(\"Validate the Content\", function () {",
																	"    pm.expect(jsonData.data.checkBlackList.domainIsBlacklisted).to.be.true;",
																	"    pm.expect(jsonData.data.checkBlackList.emailIsBlacklisted).to.be.false;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"{{domain_name}}\"\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "checkBlackList - Domain NOT present",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('checkBlackList');",
																	"    pm.expect(jsonData.data.checkBlackList).to.have.all.keys('domainIsBlacklisted', 'emailIsBlacklisted');",
																	"});",
																	"",
																	"pm.test(\"Validate the Content\", function () {",
																	"    pm.expect(jsonData.data.checkBlackList.domainIsBlacklisted).to.be.false;",
																	"    pm.expect(jsonData.data.checkBlackList.emailIsBlacklisted).to.be.false;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"RandomDomain.com\"\n      type:\"Domain\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "checkBlackList - Email Fraud type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var randomNUM = Math.floor((Math.random()*(9990+1))+1000);",
																	"var emailaddress = \"email\".concat(randomNUM,\"@ca.com\");",
																	"pm.variables.set(\"emailaddress\", emailaddress);",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"",
																	"    body: JSON.stringify({query: 'mutation ABC{createBlackList(fraudModel: {email:\"'+emailaddress+'\", type:\"Email\", notes:\"Fraud Email\",createdDate:\"2021-10-06 14:55:53.70153+00\",id:\"00000000-0000-0000-0000-000000000000\"}){id, domain, email, createdDate, type, notes} }'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate the Content\", function () {",
																	"    pm.expect(jsonData.data.checkBlackList.domainIsBlacklisted).to.be.false;",
																	"    pm.expect(jsonData.data.checkBlackList.emailIsBlacklisted).to.be.true;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      email:\"{{emailaddress}}\"\n      type:\"Email\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status 200 - checkBlackList - Invalid Fraud Type",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('errors','data');",
																	"    pm.expect(jsonData.errors).to.be.an('array');",
																	"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
																	"});",
																	"",
																	"pm.test(\"Validate the Error message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq('The field Type is invalid.')",
																	"    pm.expect(jsonData.data.checkBlackList).to.be.null;",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query{\n  checkBlackList(\n    checkBlacklistModel:{\n      domain:\"domain3698.com\"\n      type:\"Random\"\n    }\n  ){\n    domainIsBlacklisted\n    emailIsBlacklisted\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "GlobalItems",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "Search a Global Item",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    searchGlobalItems(searchText:\"\"){\n      count,\n      items\n      {\n        name\n        id\n        internalName\n        isAssigned\n      }\n   }\n  }",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Modifiers",
					"item": [
						{
							"name": "Create Modifier",
							"item": [
								{
									"name": "Associate Ingredients while Creating a Modifier",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "to be reported - Add Modifier - with same ingredient twice",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate JSON structure\", function () {",
																	"    pm.expect(jsonData).to.have.all.keys('data');",
																	"    pm.expect(jsonData.data).to.have.all.keys('AddModifier');",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"modName\", modName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
																	"        listIngredients.push(response.json().data.ingredients.items[i].id);",
																	"    }",
																	"    pm.variables.set(\"ingredientsList\", listIngredients);",
																	"    pm.variables.set(\"ing0\", listIngredients[0]);",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n      modifierIngredients:[{ingredientId:\"{{ing0}}\"},{ingredientId:\"{{ing0}}\"}]\n    }\n  )\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add Modifier - ingredient non-existing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate Error Message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Unable to save Modifier. Please try again. If the problem persists, contact your system administrator.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"modName\", modName);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n      modifierIngredients:[{ingredientId:\"1a8b0204-7805-4d45-a98f-9e87fc88237a\"}]\n    }\n  )\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add Modifier - POS non-existing",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const jsonData = pm.response.json(); ",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate Error Message\", function () {",
																	"    pm.expect(jsonData.errors[0].message).to.eq(\"Unable to save Modifier. Please try again. If the problem persists, contact your system administrator.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"modName\", modName);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"1a8b0204-7805-4d45-a98f-9e87fc88237a\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n     \n    }\n  )\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Add Modifier with a few Ingredients",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('AddModifier');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    pm.variables.set(\"ingredientsList\", listIngredients);",
															"    pm.variables.set(\"ing0\", listIngredients[0]);",
															"    pm.variables.set(\"ing1\", listIngredients[1]);",
															"    pm.variables.set(\"ing2\", listIngredients[2]);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n      modifierIngredients:[{ingredientId:\"{{ing0}}\"},{ingredientId:\"{{ing1}}\"},{ingredientId:\"{{ing2}}\"}]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Modifier with 1 Ingredient",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonData = pm.response.json(); ",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    pm.expect(jsonData).to.have.all.keys('data');",
															"    pm.expect(jsonData.data).to.have.all.keys('AddModifier');",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    pm.variables.set(\"ingredientsList\", listIngredients);",
															"    pm.variables.set(\"ing0\", listIngredients[0]);",
															"    pm.variables.set(\"ing1\", listIngredients[1]);",
															"    pm.variables.set(\"ing2\", listIngredients[2]);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n      modifierIngredients:[{ingredientId:\"{{ing0}}\"}]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get a Modifier Information - ingredients mapped",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate JSON structure\", function () {",
															"    const jsonData = pm.response.json(); ",
															"    pm.expect(jsonData.data.modifierById).to.have.all.keys('id','name','modifierIngredients');",
															"  }); ",
															"",
															"pm.test(\"Validate the Content\", function () {",
															"    const modifierInfo = pm.response.json().data.modifierById;",
															"    pm.expect(modifierInfo.id).to.eq(pm.variables.get(\"modifierId\"));",
															"    pm.expect(modifierInfo.name).to.be.a('string');",
															"    pm.expect(modifierInfo.name==pm.variables.get(\"modName\"))",
															"});",
															"",
															"pm.test(\"Validate the Content - ingredients mapping\", function () {",
															"    const modIngredients = pm.response.json().data.modifierById.modifierIngredients;",
															"    pm.expect(modIngredients.length).to.eql(2);",
															"    listIngredients = [];",
															"    for(var i = 0; i<pm.response.json().data.modifierById.modifierIngredients.length;i++){",
															"        listIngredients.push(pm.response.json().data.modifierById.modifierIngredients[i].ingredientId);",
															"    }",
															"    pm.expect(listIngredients).to.include(pm.variables.get(\"ing0\"));",
															"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ing0;",
															"var ing1;",
															"//Get the ingredients list",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    ing0 = listIngredients[0];",
															"    pm.variables.set(\"ing0\", ing0);",
															"    ",
															"    ing1 = listIngredients[1];",
															"    pm.variables.set(\"ing1\", ing1);",
															"",
															"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierName\", modName);",
															"",
															"    const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\", modifierIngredients:[{ingredientId:\"'+ ing0 +'\"},{ingredientId:\"'+ing1+'\"}] })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
															"});",
															"",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query GetModifierById($modifierId: Uuid!){\n    modifierById(id: $modifierId){\n        id,\n        name,\n         modifierIngredients{\n        ingredientId,\n        ingredient{\n            id,\n            name\n        }\n    }\n    }\n}",
														"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove an Ingredient from a Modifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the Content - ingredients mapping\", function () {",
															"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
															"    pm.expect(modIngredients.length).to.eql(1);",
															"    pm.expect(modIngredients[0].ingredientId).to.eql(pm.variables.get(\"ing1\"))",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ing0;",
															"var ing1;",
															"//Get the ingredients list",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    ing0 = listIngredients[0];",
															"    pm.variables.set(\"ing0\", ing0);",
															"    ",
															"    ing1 = listIngredients[1];",
															"    pm.variables.set(\"ing1\", ing1);",
															"",
															"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierName\", modName);",
															"",
															"    const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\", modifierIngredients:[{ingredientId:\"'+ ing0 +'\"},{ingredientId:\"'+ing1+'\"}] })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
															"});",
															"",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n      modifierIngredients:[{ingredientId:\"{{ing1}}\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
														"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove all ingredients from a modifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the Content - ingredients mapping\", function () {",
															"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
															"    pm.expect(modIngredients.length).to.eql(0);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ing0;",
															"var ing1;",
															"//Get the ingredients list",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    ing0 = listIngredients[0];",
															"    pm.variables.set(\"ing0\", ing0);",
															"    ",
															"    ing1 = listIngredients[1];",
															"    pm.variables.set(\"ing1\", ing1);",
															"",
															"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierName\", modName);",
															"",
															"    const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\", modifierIngredients:[{ingredientId:\"'+ ing0 +'\"},{ingredientId:\"'+ing1+'\"}] })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
															"});",
															"",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n      modifierIngredients:[]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
														"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Add Modifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('AddModifier');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
													"pm.variables.set(\"modName\", modName);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Modifier with same name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"});",
													"",
													"pm.test(\"Validate JSON content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('Modifier name already exist.');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
													"pm.variables.set(\"modName\", modName);",
													"var posid1 = pm.environment.get(\"POSId1\");",
													"var posid2 = pm.environment.get(\"POSId2\");",
													"",
													"const postRequest = {",
													"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"  },",
													"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
													"};",
													"",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      }]\n    }\n  )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add modifier with blank name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('errors');",
													"    pm.expect(jsonData.errors).to.be.an('array');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"});",
													"",
													"pm.test(\"Validate JSON content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('The Name field is required.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      }]\n    }\n  )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add modifier - Invalid Regex for Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('errors');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"});",
													"",
													"pm.test(\"Validate JSON content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Name field.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"$@#\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      }]\n    }\n  )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add modifier with invalid posSystemid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('errors');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"});",
													"",
													"pm.test(\"Validate JSON content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('Unable to save Modifier. Please try again. If the problem persists, contact your system administrator.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"RandomABC\"\n      modifierPosSystems:[{\n        posSystemId:\"053cd53b-33fe-4fda-bb35-bc7a0dbe2742\"\n        posId:\"1\"\n      }]\n    }\n  )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add modifier - Invalid Regex for posId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.any.keys('errors');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"});",
													"",
													"pm.test(\"Validate JSON content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Pos Id field.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"RandName\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"(pos-id-1)\"\n      }]\n    }\n  )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Associate Ingredients while Updating a Modifier",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "ToBeReported - add same ingredient twice",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate the Content - ingredients mapping\", function () {",
																	"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
																	"    pm.expect(modIngredients.length).to.eql(2);",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<pm.response.json().data.updateModifier.modifierIngredients.length;i++){",
																	"        listIngredients.push(pm.response.json().data.updateModifier.modifierIngredients[i].ingredientId);",
																	"    }",
																	"    pm.expect(listIngredients).to.include(pm.variables.get(\"ing0\"));",
																	"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
																	"",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ing0;",
																	"//Get the ingredients list",
																	"const postRequest1 = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
																	"};",
																	"pm.sendRequest(postRequest1, (error, response) => {",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
																	"        listIngredients.push(response.json().data.ingredients.items[i].id);",
																	"    }",
																	"    ing0 = listIngredients[0];",
																	"    pm.variables.set(\"ing0\", ing0);",
																	"    ",
																	"",
																	"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"modifierName\", modName);",
																	"",
																	"    const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\"})}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    console.log(response.code);",
																	"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
																	"});",
																	"",
																	"})",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n        modifierIngredients:[{ingredientId:\"{{ing0}}\"},{ingredientId:\"{{ing0}}\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
																"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "to be fixed by venkat - dummy POS ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate the Content - ingredients mapping\", function () {",
																	"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
																	"    pm.expect(modIngredients.length).to.eql(2);",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<pm.response.json().data.updateModifier.modifierIngredients.length;i++){",
																	"        listIngredients.push(pm.response.json().data.updateModifier.modifierIngredients[i].ingredientId);",
																	"    }",
																	"    pm.expect(listIngredients).to.include(pm.variables.get(\"ing0\"));",
																	"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
																	"",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ing0;",
																	"//Get the ingredients list",
																	"const postRequest1 = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
																	"};",
																	"pm.sendRequest(postRequest1, (error, response) => {",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
																	"        listIngredients.push(response.json().data.ingredients.items[i].id);",
																	"    }",
																	"    ing0 = listIngredients[0];",
																	"    pm.variables.set(\"ing0\", ing0);",
																	"    ",
																	"",
																	"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"modifierName\", modName);",
																	"",
																	"    const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\"})}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    console.log(response.code);",
																	"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
																	"});",
																	"",
																	"})",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"a6ccd9c9-95af-4469-9f0a-3c7d963c1793\"\n          posId:\"cheese-dip\"\n        }\n      ]\n        modifierIngredients:[{ingredientId:\"{{ing0}}\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
																"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "to be fixed by venkat - ingredient does not exist",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Validate the Content - ingredients mapping\", function () {",
																	"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
																	"    pm.expect(modIngredients.length).to.eql(2);",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<pm.response.json().data.updateModifier.modifierIngredients.length;i++){",
																	"        listIngredients.push(pm.response.json().data.updateModifier.modifierIngredients[i].ingredientId);",
																	"    }",
																	"    pm.expect(listIngredients).to.include(pm.variables.get(\"ing0\"));",
																	"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
																	"",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ing0;",
																	"//Get the ingredients list",
																	"const postRequest1 = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
																	"};",
																	"pm.sendRequest(postRequest1, (error, response) => {",
																	"    listIngredients = [];",
																	"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
																	"        listIngredients.push(response.json().data.ingredients.items[i].id);",
																	"    }",
																	"    ing0 = listIngredients[0];",
																	"    pm.variables.set(\"ing0\", ing0);",
																	"    ",
																	"",
																	"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"modifierName\", modName);",
																	"",
																	"    const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\"})}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    console.log(response.code);",
																	"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
																	"});",
																	"",
																	"})",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n        modifierIngredients:[{ingredientId:\"a6ccd9c9-95af-4469-9f0a-3c7d963c1793\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
																"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "add ingredients from scratch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the Content - ingredients mapping\", function () {",
															"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
															"    pm.expect(modIngredients.length).to.eql(2);",
															"    listIngredients = [];",
															"    for(var i = 0; i<pm.response.json().data.updateModifier.modifierIngredients.length;i++){",
															"        listIngredients.push(pm.response.json().data.updateModifier.modifierIngredients[i].ingredientId);",
															"    }",
															"    pm.expect(listIngredients).to.include(pm.variables.get(\"ing0\"));",
															"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ing0;",
															"var ing1;",
															"//Get the ingredients list",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    ing0 = listIngredients[0];",
															"    pm.variables.set(\"ing0\", ing0);",
															"    ",
															"    ing1 = listIngredients[1];",
															"    pm.variables.set(\"ing1\", ing1);",
															"",
															"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierName\", modName);",
															"",
															"    const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\"})}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
															"});",
															"",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n        modifierIngredients:[{ingredientId:\"{{ing0}}\"},{ingredientId:\"{{ing1}}\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
														"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "add more ingredients to already existing",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the Content - ingredients mapping\", function () {",
															"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
															"    pm.expect(modIngredients.length).to.eql(3);",
															"    listIngredients = [];",
															"    for(var i = 0; i<pm.response.json().data.updateModifier.modifierIngredients.length;i++){",
															"        listIngredients.push(pm.response.json().data.updateModifier.modifierIngredients[i].ingredientId);",
															"    }",
															"    pm.expect(listIngredients).to.include(pm.variables.get(\"ing0\"));",
															"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
															"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing2\"));",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ing0;",
															"var ing1;",
															"var ing2;",
															"//Get the ingredients list",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    ing0 = listIngredients[0];",
															"    pm.variables.set(\"ing0\", ing0);",
															"    ",
															"    ing1 = listIngredients[1];",
															"    pm.variables.set(\"ing1\", ing1);",
															"",
															"    ing2 = listIngredients[2];",
															"    pm.variables.set(\"ing2\", ing2);",
															"",
															"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierName\", modName);",
															"",
															"    const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\", modifierIngredients:[{ingredientId:\"'+ ing0 +'\"},{ingredientId:\"'+ing1+'\"}] })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
															"});",
															"",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n       modifierIngredients:[{ingredientId:\"{{ing0}}\"},{ingredientId:\"{{ing1}}\"},{ingredientId:\"{{ing2}}\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
														"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "add some remove some",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the Content - ingredients mapping\", function () {",
															"    const modIngredients = pm.response.json().data.updateModifier.modifierIngredients;",
															"    pm.expect(modIngredients.length).to.eql(2);",
															"    listIngredients = [];",
															"    for(var i = 0; i<pm.response.json().data.updateModifier.modifierIngredients.length;i++){",
															"        listIngredients.push(pm.response.json().data.updateModifier.modifierIngredients[i].ingredientId);",
															"    }",
															"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing1\"));",
															"     pm.expect(listIngredients).to.include(pm.variables.get(\"ing2\"));",
															"",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ing0;",
															"var ing1;",
															"var ing2;",
															"//Get the ingredients list",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListIngredients{ingredients{items{__typename,id,name},totalCount}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listIngredients = [];",
															"    for(var i = 0; i<response.json().data.ingredients.items.length;i++){",
															"        listIngredients.push(response.json().data.ingredients.items[i].id);",
															"    }",
															"    ing0 = listIngredients[0];",
															"    pm.variables.set(\"ing0\", ing0);",
															"    ",
															"    ing1 = listIngredients[1];",
															"    pm.variables.set(\"ing1\", ing1);",
															"",
															"    ing2 = listIngredients[2];",
															"    pm.variables.set(\"ing2\", ing2);",
															"",
															"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierName\", modName);",
															"",
															"    const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\", modifierIngredients:[{ingredientId:\"'+ ing0 +'\"},{ingredientId:\"'+ing1+'\"}] })}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    console.log(response.code);",
															"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
															"});",
															"",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modifierId}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n       modifierIngredients:[{ingredientId:\"{{ing1}}\"},{ingredientId:\"{{ing2}}\"}]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n    modifierIngredients{\n        ingredientId\n        ingredient{\n            id,\n            name\n        }\n    }\n  }\n}",
														"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update Modifier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
													"pm.variables.set(\"modName\", modName);",
													"var posid1 = pm.environment.get(\"POSId1\");",
													"var posid2 = pm.environment.get(\"POSId2\");",
													"",
													"const postRequest = {",
													"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"  },",
													"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
													"};",
													"",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('updateModifier');",
													"    pm.expect(jsonData.data.updateModifier).to.have.all.keys('id','name','modifierPosSystems');",
													"    pm.expect(jsonData.data.updateModifier.modifierPosSystems).to.be.an('array');",
													"    pm.expect(jsonData.data.updateModifier.modifierPosSystems[0]).to.have.all.keys('posSystemId','posId')",
													"});",
													"",
													"",
													"pm.test(\"Validate the content\", function () {",
													"    pm.expect(jsonData.data.updateModifier.id).to.eq(pm.variables.get(\"modID\"));",
													"    pm.expect(jsonData.data.updateModifier.name).to.eq(pm.variables.get(\"modName\"));",
													"    pm.expect(jsonData.data.updateModifier.modifierPosSystems[0].posSystemId).to.eq(pm.variables.get(\"POSId1\"));",
													"    pm.expect(jsonData.data.updateModifier.modifierPosSystems[0].posId).to.eq('cheese-dip');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Modifier with invalid Regex for Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('errors','data');",
													"    pm.expect(jsonData.errors).to.be.an('array');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"    pm.expect(jsonData.data).to.have.all.keys('updateModifier');",
													"});",
													"",
													"",
													"pm.test(\"Validate the content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Name field.');",
													"    pm.expect(jsonData.data.updateModifier).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"Coke$\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Modifier with invalid Regex for podId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('errors','data');",
													"    pm.expect(jsonData.errors).to.be.an('array');",
													"    pm.expect(jsonData.errors[0]).to.have.all.keys('message');",
													"    pm.expect(jsonData.data).to.have.all.keys('updateModifier');",
													"});",
													"",
													"",
													"pm.test(\"Validate the content\", function () {",
													"    pm.expect(jsonData.errors[0].message).to.eq('Invalid characters in Pos Id field.');",
													"    pm.expect(jsonData.data.updateModifier).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"9f9c50f7-db2f-48bd-9c45-6cad8773889f\"\n      name:\"Cheese Dip\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"c2fb5265-462e-4732-99bb-97488571604d\"\n          posId:\"(cheese-dip)\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "validations",
							"item": [
								{
									"name": "Submit",
									"item": [
										{
											"name": "Modifier Name - Invalid Characters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Error Message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Name field.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createModifier {\n  AddModifier(modifier: { name: \"Jamaican_Chicken 001$%\" })\n}",
														"variables": "{\n    \"modifier\":{\n        \"name\":\"modName002\"\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modifier Name - duplicate case sensitive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Error Message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Modifier name already exist.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var random = Math.floor((Math.random()*(99900+1))+10000);",
															"var uppercaseName = \"FRIES\"+random;",
															"pm.variables.set(\"lowercaseName\", \"fries\"+random);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+uppercaseName+'\"})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createModifier {\n  AddModifier(modifier: { name: \"{{lowercaseName}}\" })\n}",
														"variables": "{\n    \"modifier\":{\n        \"name\":\"modName002\"\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modifier Name - Leading and Trailing Spaces",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Error Message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Modifier name already exist.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\"})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createModifier {\n  AddModifier(modifier: { name: \"  {{modName}} \" })\n}\n",
														"variables": "{\n    \"modifier\":{\n        \"name\":\"modName002\"\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modifier Name - not specified",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Error Message\", function () {",
															"    console.log(pm.response.json().errors[0].message)",
															"    pm.expect(pm.response.json().errors[0].message).to.eql(\"The Name field is required.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createModifier{\nAddModifier(modifier:{\nname: \"\"\n}    \n     )\n}",
														"variables": "{\n    \"modifier\":{\n        \"name\":\"modName002\"\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Permissions",
							"item": [
								{
									"name": "Create Permissions",
									"item": [
										{
											"name": "SuperUser - CreateModifier - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.AddCatalogItem).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - CreateModifier - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.AddCatalogItem).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"{{modName}}\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - CreateModifier - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"RandomModifierName\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - CreateModifier - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"RandomName\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - CreateModifier - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"RandomName\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - CreateModifier - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  AddModifier(\n    modifier:{\n      name:\"RandomName\"\n      modifierPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }\n  )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update Permissions",
									"item": [
										{
											"name": "SuperUser - UpdateModifier - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Create a modifier that can be updated",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"var posid1 = pm.environment.get(\"POSId1\");",
															"var posid2 = pm.environment.get(\"POSId2\");",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is udpated\", function () {",
															"    pm.expect(responseJson.data.updateModifier.name).contains(\"UPDATED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}UPDATED\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - UpdateModifier - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Create a modifier that can be updated later",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"var posid1 = pm.environment.get(\"POSId1\");",
															"var posid2 = pm.environment.get(\"POSId2\");",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});",
															"",
															"",
															"",
															"//Set the authorization to use the token for Global admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is udpated\", function () {",
															"    pm.expect(responseJson.data.updateModifier.name).contains(\"UPDATED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}UPDATED\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - UpdateModifier- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Brand Partner user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a modifier that can be updated later",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"var posid1 = pm.environment.get(\"POSId1\");",
															"var posid2 = pm.environment.get(\"POSId2\");",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}UPDATED\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - UpdateModifier - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Corporate User",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a modifier that can be updated later",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"var posid1 = pm.environment.get(\"POSId1\");",
															"var posid2 = pm.environment.get(\"POSId2\");",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}UPDATED\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - UpdateModifier- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization header to use the token for this user",
															"    const postRequest1 = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a modifier that can be updated later",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"var posid1 = pm.environment.get(\"POSId1\");",
															"var posid2 = pm.environment.get(\"POSId2\");",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}UPDATED\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - UpdateModifier - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Regional Admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a modifier that can be updated later",
															"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modName\", modName);",
															"var posid1 = pm.environment.get(\"POSId1\");",
															"var posid2 = pm.environment.get(\"POSId2\");",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {AddModifier(modifier:{name:\"'+modName+'\",modifierPosSystems:[{posSystemId:\"'+posid1+'\",posId:\"new-pos-1\"},{posSystemId:\"'+posid2+'\",posId:\"new-pos-2\"}]})}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modID\", response.json().data.AddModifier);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation UpdateModifier{\n  updateModifier(\n    modifier:{\n      id:\"{{modID}}\"\n      name:\"{{modName}}UPDATED\"\n      modifierPosSystems:[\n        {\n          posSystemId:\"{{POSId1}}\"\n          posId:\"cheese-dip\"\n        }\n      ]\n    }\n  )\n  {\n    id\n    name\n    modifierPosSystems{\n      posSystemId\n      posId\n    }\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Read Permissions",
									"item": [
										{
											"name": "SuperUser - Get Modifiers - Allowed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that atleast one record is retrieved\", function () {",
															"    pm.expect(responseJson.data.modifiers.items.length).to.greaterThan(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - GetModifiers- Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Global admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is retrieved\", function () {",
															"    pm.expect(responseJson.data.modifiers.items.length).to.greaterThan(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - GetModifiers- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Brand Partner user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - GetModifiers- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Corporate User",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - GetModifiers - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization header to use the token for this user",
															"    const postRequest1 = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - GetModifiers - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Regional Admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "List Modifiers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate JSON structure\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData).to.have.all.keys('data');",
											"    pm.expect(jsonData.data).to.have.all.keys('modifiers');",
											"    pm.expect(jsonData.data.modifiers.items).to.be.an('array');",
											"    jsonData.data.modifiers.items.forEach(function(item) {",
											"      pm.expect(item).to.have.all.keys('id', 'name', '__typename'); ",
											"  }); ",
											"});",
											"",
											"pm.test(\"Validate the List length\", function () {",
											"   pm.expect(pm.response.json().data.modifiers.length>0);",
											"});",
											"",
											"pm.test(\"Validate the Content\", function () {",
											"const modifierArr = pm.response.json().data.modifiers.items;",
											"modifierArr.forEach(function(item) {",
											"      pm.expect(item.__typename)== \"ModifierSearchModel\";",
											"      pm.expect(item.id).length==36;",
											"      pm.expect(item.name).to.be.a('string');",
											"  }); ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ListModifiers{\n    modifiers{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{AdminUI_GraphQLAPI_Url}}",
									"host": [
										"{{AdminUI_GraphQLAPI_Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Modifier Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate JSON structure\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data.modifierById).to.have.all.keys('id','name');",
											"  }); ",
											"",
											"pm.test(\"Validate the Content\", function () {",
											"    const modifierInfo = pm.response.json().data.modifierById;",
											"    pm.expect(modifierInfo.id).length==36;",
											"    pm.expect(modifierInfo.name).to.be.a('string');",
											"    pm.expect(modifierInfo.name==pm.variables.get(\"modName\"))",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var modName = \"Soda\" + Math.floor((Math.random()*(9990+1))+1000);",
											"pm.variables.set(\"modifierName\", modName);",
											"",
											"const postRequest = {",
											"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json',",
											"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
											"  },",
											"  body: JSON.stringify({query: 'mutation createModifier{AddModifier(modifier: { name: \"'+modName+'\" })}'})",
											"};",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    console.log(response.code);",
											"    pm.variables.set(\"modifierId\", response.json().data.AddModifier);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetModifierById($modifierId: Uuid!){\n    modifierById(id: $modifierId){\n        id,\n        name\n    }\n}",
										"variables": "{\n    \"modifierId\":\"{{modifierId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{AdminUI_GraphQLAPI_Url}}",
									"host": [
										"{{AdminUI_GraphQLAPI_Url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Modifier - Id does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate the Content\", function () {",
											"   pm.expect(pm.response.json().errors[0].message).to.eql(\"Could not find any modifier with id 1fa102ae-56f1-4e3d-ab91-afe9e2cd883b\");",
											"   pm.expect(pm.response.json().data.modifierById).to.be.null;",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetModifierById($modifierId: Uuid!){\n    modifierById(id: $modifierId){\n        id,\n        name\n    }\n}",
										"variables": "{\n    \"modifierId\":\"1fa102ae-56f1-4e3d-ab91-afe9e2cd883b\"\n}"
									}
								},
								"url": {
									"raw": "{{AdminUI_GraphQLAPI_Url}}",
									"host": [
										"{{AdminUI_GraphQLAPI_Url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Modifier Groups",
					"item": [
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Add Modifiers to a Modifier Group",
									"item": [
										{
											"name": "Create a Modifier Group with modifiers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Seasoning\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[0]).to.have.all.keys('id', 'modifierId', 'modifierGroupId')",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings).length==2;",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n        modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a Modifier Group with modifiers",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})",
															"",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0]).to.have.all.keys('id', 'modifierId', 'modifierGroupId')",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings).length==2;",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n        modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Edit Modifier Group",
									"item": [
										{
											"name": "Update a Modifier Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})",
															"",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"    pm.variables.set(\"currMod003\", listModifiers[2]);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0]).to.have.all.keys('id', 'modifierId', 'modifierGroupId')",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings).length==3;",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[2].modifierId).to.be.equal(pm.variables.get(\"currMod003\"));",
															"});",
															"",
															"pm.test(\"Verify the updations of field values\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.name)==pm.variables.get(\"modifierGroupName\")+\"Updated\";",
															"    pm.expect(responseJson.data.updateModifierGroup.note)==\"The Best Fries: Updated with the best dips 1234567890\";",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierGroupPosSystems.length==2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}Updated\"\n    note: \"The Best Fries: Updated with the best dips 1234567890\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n        modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n            {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod003}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      note\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update a Modifier Group - Clear POS Ids",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\", modifierGroupPosSystems:[{ posId:\"modg-ncr-1\",  posSystemId:\"'+pm.environment.get(\"POSId1\")+'\"},{ posId:\"modg-symp-1\", posSystemId:\"'+pm.environment.get(\"POSId2\")+'\"}] }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})",
															"",
															"const postRequest1 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest1, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"    pm.variables.set(\"currMod003\", listModifiers[2]);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0]).to.have.all.keys('id', 'modifierId', 'modifierGroupId')",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings==[]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[]\n        modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Validations",
									"item": [
										{
											"name": "Submit",
											"item": [
												{
													"name": "(BUG Ecomm-1904) Modifier Group Name - Leading and Trailing Spaces",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Modifier group name already exist.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
																	"})",
																	"//BUG Ecomm-1904"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\" {{modifierGroupName}}  \"\n    note: \"The Seasoning choices for the Fries\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - Case sensitivity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Modifier group name already exist.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var random = Math.floor((Math.random()*(99900+1))+10000);",
																	"var uppercaseName = \"FRIES\"+random;",
																	"pm.variables.set(\"lowercaseName\", \"fries\"+random);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+uppercaseName+'\" }){id,name}}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
																	"})",
																	"//BUG Ecomm-1905"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{lowercaseName}}\"\n    note: \"The Seasoning choices for the Fries\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Note - Not specified",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Modifier Group should be created\", function () {",
																	"    let jsonData = pm.response.json().data;",
																	"    pm.expect(jsonData.addModifierGroup.id.length==32)",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Seasoning\" + Math.floor((Math.random()*(99900+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group - Invalid POS Id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Pos Id field.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"Seasonings1\"\n    note: \"hello\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"123ui-56$\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n          posSystemId\n          posId\n      }\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Note - Invalid Characters",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Note field.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"ha\"\n    note: \"hello!@#$#%^&^*(&^%\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Note - Valid Characters",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"No error Message\", function () {",
																	"    pm.expect(pm.response.json().data.addModifierGroup).to.have.all.keys('id', 'name', 'note');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Seasoning\" + Math.floor((Math.random()*(99090+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello! @ # % & * ( ) - _ { } [ ] : ; ' , . / ? \\\\\\\"\"\n    }){\n      id\n      name\n      note\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Edit Modifier Group Note - Valid Characters",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"No error Message\", function () {",
																	"    pm.expect(pm.response.json().data.updateModifierGroup).to.have.all.keys('id', 'name', 'note');",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}Updated\"\n    note: \"The Best Fries: hello123! @ # % & * ( ) - _ { } [ ] : ; ' , . / ? \\\\\\\"\"\n    }){\n      id\n      name\n      note\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - Invalid Characters",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}_12\"\n    note: \"hello\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - Blank",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"The Name field is required.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"\"\n    note: \"hello\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - not specified",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"`name` is a required field and cannot be null.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    note: \"hello\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Edit",
											"item": [
												{
													"name": "Modifier Group Note - Not specified",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Modifier Group should be updated\", function () {",
																	"    let jsonData = pm.response.json().data;",
																	"    pm.expect(jsonData.updateModifierGroup.id.length==32);",
																	"    pm.expect(jsonData.updateModifierGroup.name).contains('Updated');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Dips\" + Math.floor((Math.random()*(99900+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
																	"};",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}Updated\"\n    }){\n      id\n      name\n    }\n}\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group - Invalid POS Id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Pos Id field.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"Seasonings1\"\n    note: \"hello\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"123ui-56$\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n          posSystemId\n          posId\n      }\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Note - Invalid Characters",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Note field.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"ha\"\n    note: \"hello!@#$#%^&^*(&^%\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - Invalid Characters",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
																	"pm.variables.set(\"modifierGroupName\", modGpName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}_12\"\n    note: \"hello\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - Blank",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"The Name field is required.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"\"\n    note: \"hello\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Modifier Group Name - not specified",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Error Message\", function () {",
																	"    pm.expect(pm.response.json().errors[0].message).to.eql(\"`name` is a required field and cannot be null.\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    note: \"hello\"\n    }){\n      id\n      name\n    }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Queries",
							"item": [
								{
									"name": "List Modifier Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    const jsonData = pm.response.json(); ",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('modifierGroups');",
													"    pm.expect(jsonData.data.modifierGroups.items).to.be.an('array');",
													"    jsonData.data.modifierGroups.items.forEach(function(item) {",
													"      pm.expect(item).to.have.all.keys('id', 'name', '__typename'); ",
													"  }); ",
													"});",
													"",
													"pm.test(\"Validate the List length\", function () {",
													"   pm.expect(pm.response.json().data.modifierGroups.items.length)>0;",
													"});",
													"",
													"pm.test(\"Validate the Content\", function () {",
													"const modifierGpArr = pm.response.json().data.modifierGroups.items;",
													"modifierGpArr.forEach(function(item) {",
													"      pm.expect(item.__typename)== \"ModifierGroupSearchModel\";",
													"      pm.expect(item.id).length==36;",
													"      pm.expect(item.name).to.be.a('string');",
													"  }); ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Permissions",
							"item": [
								{
									"name": "Create Permissions",
									"item": [
										{
											"name": "SuperUser - CreateModifierGroup - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Seasoning\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.addModifierGroup.id).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings).length==2;",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n        modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - CreateModifierGroup - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															" ",
															"var modGpName = \"Ketchups\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.data.addModifierGroup.id).to.not.be.equal(\"00000000-0000-0000-0000-000000000000\");",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings).length==2;",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.addModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n        modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - CreateModifierGroup - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});",
															"",
															"//Create a mod group that can be updated later",
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - CreateModifierGroup - NOT Allowed Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"  ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - CreateModifierGroup - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"  ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - CreateModifierGroup - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"  ",
															"    const postRequest = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  addModifierGroup(modifierGroup: {\n    id: \"00000000-0000-0000-0000-000000000000\"\n    name:\"{{modifierGroupName}}\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Update Permissions",
									"item": [
										{
											"name": "SuperUser - UpdateModifierGroup - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Create a mod group that can be updated later",
															"var modGpName = \"Fries\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})",
															"",
															"//Obtain modifiers to be added to mod group",
															"const postRequest2 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest2, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is udpated\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.name).contains(\"UPDATED\");",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings).length==2;",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}UPDATED\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n     modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - UpdateModifierGroup - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Create a mod group that can be updated later",
															"var modGpName = \"Peppers\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})",
															"",
															"//Obtain modifiers to be added to mod group",
															"const postRequest2 = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'query ListModifiers{modifiers{items{id,name}}}'})",
															"};",
															"pm.sendRequest(postRequest2, (error, response) => {",
															"    listModifiers = [];",
															"    for(var i = 0; i<response.json().data.modifiers.items.length;i++){",
															"        listModifiers.push(response.json().data.modifiers.items[i].id);",
															"    }",
															"    pm.variables.set(\"currMod001\", listModifiers[0]);",
															"    pm.variables.set(\"currMod002\", listModifiers[1]);",
															"})",
															"",
															"",
															"",
															"//Set the authorization to use the token for Global admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is udpated\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.name).contains(\"UPDATED\");",
															"});",
															"",
															"pm.test(\"Verify that the mappings are created\", function () {",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings).length==2;",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[0].modifierId).to.be.equal(pm.variables.get(\"currMod001\"));",
															"    pm.expect(responseJson.data.updateModifierGroup.modifierMappings[1].modifierId).to.be.equal(pm.variables.get(\"currMod002\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}UPDATED\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n     modifierMappings:[{\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod001}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         },\n         {\n            id:\"00000000-0000-0000-0000-000000000000\",\n            modifierId:\"{{currMod002}}\",\n            modifierGroupId:\"00000000-0000-0000-0000-000000000000\"\n         }\n      ]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - UpdateModifierGroup- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Set the authorization to use the token for Brand Partner user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a mod group that can be updated later",
															"var modGpName = \"Peppers\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}UPDATED\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - UpdateModifierGroup - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"",
															"//Set the authorization to use the token for Corporate User",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a mod group that can be updated later",
															"var modGpName = \"Peppers\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}UPDATED\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - UpdateModifierGroup- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization header to use the token for this user",
															"    const postRequest1 = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a mod group that can be updated later",
															"var modGpName = \"Peppers\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}UPDATED\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - UpdateModifierGroup - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Author: Sheetal",
															"//User-Story: Ecomm-1546 ",
															"  ",
															"//Set the authorization to use the token for Regional Admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});",
															"",
															"//Create a mod group that can be updated later",
															"var modGpName = \"Peppers\" + Math.floor((Math.random()*(99900+1))+10000);",
															"pm.variables.set(\"modifierGroupName\", modGpName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation createModGroup{addModifierGroup(modifierGroup: {id:\"00000000-0000-0000-0000-000000000000\",name: \"'+modGpName+'\" }){id,name}}'})",
															"};",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"modifierGroupId\", response.json().data.addModifierGroup.id);",
															"})"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation{\n  updateModifierGroup(modifierGroup: {\n    id: \"{{modifierGroupId}}\"\n    name:\"{{modifierGroupName}}UPDATED\"\n    note: \"hello134\"\n    modifierGroupPosSystems:[{\n        posSystemId:\"{{POSId1}}\"\n        posId:\"1\"\n      },\n      {\n        posSystemId:\"{{POSId2}}\"\n        posId:\"2\"\n      }]\n    }){\n      id\n      name\n      modifierGroupPosSystems{\n         posSystemId\n         posId \n      }\n      modifierMappings{\n          id\n          modifierId\n          modifierGroupId\n      }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Read Permissions",
									"item": [
										{
											"name": "SuperUser - Get ModifierGroups - Allowed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that atleast one record is retrieved\", function () {",
															"    pm.expect(responseJson.data.modifierGroups.items.length).to.greaterThan(0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"  "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GlobalAdmin - GetModifierGroups - Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Set the authorization to use the token for Global admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_GlobalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Global Admin user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Verify that the record is retrieved\", function () {",
															"    pm.expect(responseJson.data.modifierGroups.items.length).to.greaterThan(0);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "BrandPartner - GetModifierGroups- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															" ",
															"//Set the authorization to use the token for Brand Partner user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_BrandPartner_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Brand Partner user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CorporateUser - GetModifierGroups- NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Set the authorization to use the token for Corporate User",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_CorporateUser_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Team Member - GetModifierGroups - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Set the authorization header to use the token for this user",
															"    const postRequest1 = {",
															"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"    method: 'POST',",
															"    header: {",
															"        'content-type': 'application/json'",
															"    },",
															"    body: {",
															"        mode: 'urlencoded',",
															"        urlencoded : [",
															"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"        { key: 'grant_type', value: 'password'},",
															"        { key: 'username', value: pm.globals.get(\"User_TeamMember_UserName\")},",
															"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"        ]",
															"    }",
															"};",
															"",
															"//Setting the authorization to use the token for the Corporate user",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"    pm.request.headers.add({",
															"    key: \"Authorization\",",
															"    value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Regional Admin - GetModifierGroups - NOT Allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Set the authorization to use the token for Regional Admin user",
															"const postRequest1 = {",
															"url: pm.environment.get(\"AdminUI_auth_URL\"),",
															"method: 'POST',",
															"header: {",
															"    'content-type': 'application/json'",
															"},",
															"body: {",
															"    mode: 'urlencoded',",
															"    urlencoded : [",
															"    { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
															"    { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
															"    { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
															"    { key: 'grant_type', value: 'password'},",
															"    { key: 'username', value: pm.globals.get(\"User_RegionalAdmin_UserName\")},",
															"    { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
															"    ]",
															"}",
															"};",
															"",
															"//Setting the authorization to use the token for the Regional Admin",
															"pm.sendRequest(postRequest1, (error, response1) => {",
															"pm.request.headers.add({",
															"key: \"Authorization\",",
															"value: \"Bearer \"+ response1.json().access_token",
															"});",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"pm.test(\"Verify that the record is created\", function () {",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"The current user is not authorized to access this resource.\");",
															"    pm.expect(responseJson.errors[0].extensions.code).to.eql(\"AUTH_NOT_AUTHORIZED\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query ListModifierGroups{\n    modifierGroups{\n        items{\n        __typename,\n        id,\n        name\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Ingredients",
					"item": [
						{
							"name": "Query",
							"item": [
								{
									"name": "List Ingredients",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    const jsonData = pm.response.json(); ",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('ingredients');",
													"    pm.expect(jsonData.data.ingredients.items).to.be.an('array');",
													"    jsonData.data.ingredients.items.forEach(function(item) {",
													"      pm.expect(item).to.have.all.keys('id', 'name', '__typename'); ",
													"  }); ",
													"});",
													"",
													"pm.test(\"Validate the List length\", function () {",
													"   pm.expect(pm.response.json().data.ingredients.items.length).to.greaterThan(0);",
													"   pm.expect(pm.response.json().data.ingredients.totalCount).to.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Validate the Content\", function () {",
													"const ingredientsArr = pm.response.json().data.ingredients.items;",
													"ingredientsArr.forEach(function(item) {",
													"      pm.expect(item.__typename)== \"IngredientsSearchModel\";",
													"      pm.expect(item.id).length==36;",
													"      pm.expect(item.name).to.be.a('string');",
													"  }); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query ListIngredients{\n    ingredients{\n        items{\n        __typename,\n        id,\n        name\n        },\n        totalCount\n\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Ingredients - UI Query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    const jsonData = pm.response.json(); ",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('ingredients');",
													"    pm.expect(jsonData.data.ingredients.items).to.be.an('array');",
													"    jsonData.data.ingredients.items.forEach(function(item) {",
													"      pm.expect(item).to.have.all.keys('id', 'name', '__typename'); ",
													"  }); ",
													"});",
													"",
													"pm.test(\"Validate the List length\", function () {",
													"   pm.expect(pm.response.json().data.ingredients.items.length).to.greaterThan(0);",
													"   pm.expect(pm.response.json().data.ingredients.totalCount).to.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Validate the Content\", function () {",
													"    pm.response.json().data.ingredients.__typename == \"IngredientsSearchModelCollectionSegment\";",
													"const ingredientsArr = pm.response.json().data.ingredients.items;",
													"ingredientsArr.forEach(function(item) {",
													"      pm.expect(item.__typename)== \"IngredientsSearchModel\";",
													"      pm.expect(item.id).length==36;",
													"      pm.expect(item.name).to.be.a('string');",
													"  }); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetIngredients($skip: Int!, $take: Int!, $orderByQuery: [IngredientsSearchModelSortInput!], $searchText: String!) { ingredients(skip: $skip, take: $take, where: { name: { like: $searchText } }, order: $orderByQuery) { __typename totalCount items { __typename id name ... on IngredientsSearchModel { id } } } }",
												"variables": "{\n    \"name\":\"DESC\",\n    \"searchText\":\"001\",\n    \"skip\":0,\n    \"take\":50\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Ingredients based on a searchText",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    const jsonData = pm.response.json(); ",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('ingredients');",
													"    pm.expect(jsonData.data.ingredients.items).to.be.an('array');",
													"    jsonData.data.ingredients.items.forEach(function(item) {",
													"      pm.expect(item).to.have.all.keys('id', 'name', '__typename'); ",
													"  }); ",
													"});",
													"",
													"pm.test(\"Validate the List length\", function () {",
													"   pm.expect(pm.response.json().data.ingredients.items.length).to.greaterThan(0);",
													"   pm.expect(pm.response.json().data.ingredients.totalCount).to.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Validate the Content\", function () {",
													"    pm.response.json().data.ingredients.__typename == \"IngredientsSearchModelCollectionSegment\";",
													"const ingredientsArr = pm.response.json().data.ingredients.items;",
													"ingredientsArr.forEach(function(item) {",
													"      pm.expect(item.__typename)== \"IngredientsSearchModel\";",
													"      pm.expect(item.id).length==36;",
													"      pm.expect(item.name).to.be.a('string');",
													"  }); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var ingName = \"Sea Salt \" + Math.floor((Math.random()*(9990+1))+1000);",
													"pm.variables.set(\"ingName\", ingName);",
													"",
													"const postRequest = {",
													"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"  method: 'POST',",
													"  header: {",
													"    'Content-Type': 'application/json',",
													"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"  },",
													"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
													"};",
													"",
													"pm.sendRequest(postRequest, (error, response) => {",
													"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetIngredients($skip: Int!, $take: Int!, $orderByQuery: [IngredientsSearchModelSortInput!], $searchText: String!) { ingredients(skip: $skip, take: $take, where: { name: { like: $searchText } }, order: $orderByQuery) { __typename totalCount items { __typename id name ... on IngredientsSearchModel { id } } } }",
												"variables": "{\n    \"name\":\"DESC\",\n    \"searchText\":\"Sea Salt\",\n    \"skip\":0,\n    \"take\":50\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mutations",
							"item": [
								{
									"name": "Add an Ingredient",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "Invalid Characters",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var invalidCharName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000) + \"#$_+=;<>\";",
																	"pm.variables.set(\"invalidCharName\", invalidCharName);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"{{invalidCharName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name blank",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"The Name field is required.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name not specified",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"`name` is a required field and cannot be null.\");",
																	"});",
																	"",
																	"pm.test(\"Status code is 400 - Bad Request\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      \n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name more than 250 characters",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"You cannot enter more then 250 characters.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"ab1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name duplicate",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"ingName\", ingName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"This ingredient name already exists.\");",
																	"});",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"{{ingName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name duplicate Case Sensitive",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var random = Math.floor((Math.random()*(99900+1))+10000);",
																	"var uppercaseName = \"SALT\"+random;",
																	"pm.variables.set(\"lowercaseName\", \"salt\"+random);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+uppercaseName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"This ingredient name already exists.\");",
																	"});",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"{{lowercaseName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "(bug Ecomm 1904) Ingredient Name duplicate Leading and Trailing Spaces",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"ingName\", ingName);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"This ingredient name already exists.\");",
																	"});",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"  {{ingName}}  \"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Add an Ingredient",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"ingName\", ingName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addIngredient).to.have.all.keys('id', 'name');",
															"});",
															"",
															"pm.test(\"Validate the contents\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addIngredient.name).to.be.deep.equal(pm.variables.get(\"ingName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"{{ingName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an Ingredient - Beginning with a number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ingName = Math.floor((Math.random()*(9990+1))+1000) + \"Ingredient\";",
															"pm.variables.set(\"ingName\", ingName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addIngredient).to.have.all.keys('id', 'name');",
															"});",
															"",
															"pm.test(\"Validate the contents\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addIngredient.name).to.be.deep.equal(pm.variables.get(\"ingName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"{{ingName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an Ingredient Special Characters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var specialCharName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000) + \".!@%^ *()[]&/,-'\";",
															"pm.variables.set(\"specialCharName\", specialCharName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addIngredient).to.have.all.keys('id', 'name');",
															"});",
															"",
															"pm.test(\"Validate the contents\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.addIngredient.name).to.be.deep.equal(pm.variables.get(\"specialCharName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  addIngredient(\n    ingredient:{\n      name: \"{{specialCharName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Modify an Ingredient",
									"item": [
										{
											"name": "Validations",
											"item": [
												{
													"name": "Invalid Characters",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"",
																	"var invalidCharName = ingName + \"#$_+=;<>\";",
																	"pm.variables.set(\"invalidCharName\", invalidCharName);",
																	"",
																	"//The ingredient that will be updated",
																	"var thisingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid characters in Name field.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n         id: \"{{ingId}}\"\n      name: \"{{invalidCharName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name blank",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"The Name field is required.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n         id: \"{{ingId}}\"\n      name: \"\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name not specified",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"`name` is a required field and cannot be null.\");",
																	"});",
																	"",
																	"pm.test(\"Status code is 400 - Bad Request\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n       id: \"{{ingId}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name more than 250 characters",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"var ingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"You cannot enter more then 250 characters.\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n         id: \"{{ingId}}\"\n      name: \"ab1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Ingredient Name duplicate",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//The ingredient that will be updated",
																	"var thisingName = \"Ingredient\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"",
																	"const postRequest = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+thisingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest, (error, response) => {",
																	"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
																	"});",
																	"",
																	"//The ingredient whose name will be used",
																	"var ingName = \"Mayo\" + Math.floor((Math.random()*(9990+1))+1000);",
																	"pm.variables.set(\"IngredientName\", ingName);",
																	"",
																	"const postRequest1 = {",
																	"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
																	"  method: 'POST',",
																	"  header: {",
																	"    'Content-Type': 'application/json',",
																	"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
																	"  },",
																	"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
																	"};",
																	"",
																	"pm.sendRequest(postRequest1, (error, response) => {",
																	"    ",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Verify Correct Error Message\", function () {",
																	"    const responseJson = pm.response.json();",
																	"    pm.expect(responseJson.errors[0].message).to.eql(\"This ingredient name already exists.\");",
																	"});",
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n         id: \"{{ingId}}\"\n      name: \"{{IngredientName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{AdminUI_GraphQLAPI_Url}}",
															"host": [
																"{{AdminUI_GraphQLAPI_Url}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Modify an Ingredient",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ingName = \"Kosher Salt \" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"ingName\", ingName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.modifyIngredient).to.have.all.keys('id', 'name');",
															"});",
															"",
															"pm.test(\"Validate the contents\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.modifyIngredient.name).contains('UPDATED');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n        id: \"{{ingId}}\"\n      name: \"{{ingName}}UPDATED\"\n    }\n  ){\n      id,\n      name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify an Ingredient - Beginning with a number",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ingName = \"Himalayan Salt \" + Math.floor((Math.random()*(9990+1))+1000);",
															"pm.variables.set(\"ingName\", ingName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.modifyIngredient).to.have.all.keys('id', 'name');",
															"});",
															"",
															"pm.test(\"Validate the contents\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.modifyIngredient.name).contains('123');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n         id: \"{{ingId}}\"\n      name: \"123{{ingName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify an Ingredient Special Characters",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var ingName = \"Pink Salt \" + Math.floor((Math.random()*(9990+1))+1000);",
															"var specialCharName = ingName + \".!@%^ *()[]&/,-'\";",
															"pm.variables.set(\"specialCharName\", specialCharName);",
															"",
															"const postRequest = {",
															"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
															"  method: 'POST',",
															"  header: {",
															"    'Content-Type': 'application/json',",
															"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
															"  },",
															"  body: JSON.stringify({query: 'mutation {addIngredient(ingredient:{name:\"'+ingName+'\"}){id,name}}'})",
															"};",
															"",
															"pm.sendRequest(postRequest, (error, response) => {",
															"    pm.variables.set(\"ingId\", response.json().data.addIngredient.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseJson = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate the JSON structure\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.modifyIngredient).to.have.all.keys('id', 'name');",
															"});",
															"",
															"pm.test(\"Validate the contents\", function () {",
															"    pm.expect(responseJson).to.have.all.keys('data');",
															"    pm.expect(responseJson.data.modifyIngredient.name).to.be.deep.equal(pm.variables.get(\"specialCharName\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n  modifyIngredient(\n    ingredient:{\n         id: \"{{ingId}}\"\n      name: \"{{specialCharName}}\"\n    }\n  ){\n      id,\n      name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Menus",
					"item": [
						{
							"name": "Store Menu Item mappings",
							"item": [
								{
									"name": "Validations",
									"item": [
										{
											"name": "500 - Incorrect Data Type of arguments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\nitemId\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeId\": 12345677,\n        \"storeItems\": [\n           1234\n        ]\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - Incorrect Data Type of arguments Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\n\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeId\": 12345677,\n        \"storeItems\": [\n            {\n                \n                \"locationId\": true,\n                \"isEnabled\": false\n            }\n        ]\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - null argument values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\nitemId\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeId\": null,\n        \"storeItems\": [\n    null\n        ]\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - Invalid id values",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\nitemId\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeId\": \"0d003a39-2989-4bb3-9884-820264ce9dfv\",\n        \"storeItems\": [\n           \"0d003a39-2989-4bb3-9884-820264ce9dfv\",\"177fbfbe-eb01-4129-ad9d-9ada4db8a68\"\n        ]\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - StoreId not specified",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\nitemId\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeItems\": [\n           \"0d003a39-2989-4bb3-9884-820264ce9dfv\",\"177fbfbe-eb01-4129-ad9d-9ada4db8a68\"\n        ]\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - storeItems not specified",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\nitemId\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeId\": \"0d003a39-2989-4bb3-9884-820264ce9dfv\"\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - storeId special characters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `mapping` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "  mutation updateStoreItems\n  ($mapping:StoreMenuItemRequestModelInput)\n{\n  updateMappingsForStoreItems(mapping:$mapping)\n  {\nname\nitemId\nisEnabled\ncategories\n{\n  categoryName\n  id\n}\n  }\n}",
														"variables": " {\n     \"mapping\": {\n        \"storeId\": \"0d00!@#$-2989-4bb3-9884-820264ce9dfv\"\n    }\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "updateMappingsForStoreItems",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Get all the regional items",
													"const postRequestlistItems = {",
													"    url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"        'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"    },",
													"    body: JSON.stringify({",
													"        query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'",
													"    })",
													"};",
													"pm.sendRequest(postRequestlistItems, (error, response) => {",
													"    listItems = [];",
													"    for (var i = 0; i < response.json().data.searchGlobalItems.items.length; i++) {",
													"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
													"    }",
													"    pm.variables.set(\"regionalItemsList\", listItems);",
													"    pm.variables.set(\"currentItem\", pm.variables.get(\"regionalItemsList\")[0]);",
													"    //Get the categories and their items - inside items block",
													"    const postRequestlistCategories = {",
													"        url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"        method: 'POST',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"        },",
													"        body: JSON.stringify({",
													"            query: '{categoryItems{items{id,categoryName,regionalItems{id,name}}}}'",
													"        })",
													"    };",
													"    pm.sendRequest(postRequestlistCategories, (error, response) => {",
													"        listCategories = [];",
													"        for (var i = 0; i < response.json().data.categoryItems.items.length; i++) {",
													"            listCategories.push(response.json().data.categoryItems.items[i].id);",
													"            listCategories.push(response.json().data.categoryItems.items[i].categoryName);",
													"        }",
													"        pm.variables.set(\"regionalCategories\", listCategories);",
													"        pm.variables.set(\"currentCategory\", pm.variables.get(\"regionalCategories\")[0]);",
													"        pm.variables.set(\"currentCategoryname\", pm.variables.get(\"regionalCategories\")[1]);",
													"        //Get stores -- inside items and then categories",
													"        const postRequestlistStores = {",
													"            url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"            method: 'POST',",
													"            header: {",
													"                'Content-Type': 'application/json',",
													"                'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"            },",
													"            body: JSON.stringify({",
													"                query: '{searchLocationsOffsetPagination{totalCount,items{id,name}}}'",
													"            })",
													"        };",
													"        pm.sendRequest(postRequestlistStores, (error, response) => {",
													"            listStores = [];",
													"            for (var i = 0; i < response.json().data.searchLocationsOffsetPagination.items.length; i++) {",
													"                listStores.push(response.json().data.searchLocationsOffsetPagination.items[i].id);",
													"                listStores.push(response.json().data.searchLocationsOffsetPagination.items[i].name);",
													"            }",
													"            pm.variables.set(\"stores\", listStores);",
													"            pm.variables.set(\"currentStore\", pm.variables.get(\"stores\")[0]);",
													"            //Assign an item to a category - updateItemsMappingForCategory",
													"            const postRequestassignItemtoCategory = {",
													"                url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"                method: 'POST',",
													"                header: {",
													"                    'Content-Type': 'application/json',",
													"                    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"                },",
													"                body: JSON.stringify({",
													"                    query: 'mutation{updateItemsMappingForCategory(mappings:{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",  sortOrder: 0}){id,categoryId}}'",
													"                })",
													"            };",
													"            pm.sendRequest(postRequestassignItemtoCategory, (error, response) => {",
													"                pm.expect(response.json().data.updateItemsMappingForCategory[0].id).eql(\"00000000-0000-0000-0000-000000000000\");",
													"            })",
													"        })",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Mapping\", function () {",
													"    let isPresent = false;",
													"    for (var i = 0; i < pm.response.json().data.updateMappingsForStoreItems.length; i++) {",
													"        if(pm.response.json().data.updateMappingsForStoreItems[i].itemId===pm.variables.get(\"currentItem\")){",
													"            isPresent = true;",
													"            break;",
													"        }        ",
													"    }",
													"   pm.expect(isPresent).eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation{\n    updateMappingsForStoreItems(mapping:{\n            storeId: \"{{currentStore}}\",storeItems:[\"{{currentItem}}\"]\n    }){\n        itemId\n        categories{\n            id,\n            categoryName\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "updateMappingsForStoreItems - More than one item in the array",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Get all the regional items",
													"const postRequestlistItems = {",
													"    url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"        'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"    },",
													"    body: JSON.stringify({",
													"        query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'",
													"    })",
													"};",
													"pm.sendRequest(postRequestlistItems, (error, response) => {",
													"    listItems = [];",
													"    for (var i = 0; i < response.json().data.searchGlobalItems.items.length; i++) {",
													"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
													"    }",
													"    pm.variables.set(\"regionalItemsList\", listItems);",
													"    pm.variables.set(\"currentItem\", pm.variables.get(\"regionalItemsList\")[0]);",
													"    pm.variables.set(\"currentItem1\", pm.variables.get(\"regionalItemsList\")[1]);",
													"    //Get the categories and their items - inside items block",
													"    const postRequestlistCategories = {",
													"        url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"        method: 'POST',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"        },",
													"        body: JSON.stringify({",
													"            query: '{categoryItems{items{id,categoryName,regionalItems{id,name}}}}'",
													"        })",
													"    };",
													"    pm.sendRequest(postRequestlistCategories, (error, response) => {",
													"        listCategories = [];",
													"        for (var i = 0; i < response.json().data.categoryItems.items.length; i++) {",
													"            listCategories.push(response.json().data.categoryItems.items[i].id);",
													"            listCategories.push(response.json().data.categoryItems.items[i].categoryName);",
													"        }",
													"        pm.variables.set(\"regionalCategories\", listCategories);",
													"        pm.variables.set(\"currentCategory\", pm.variables.get(\"regionalCategories\")[0]);",
													"        pm.variables.set(\"currentCategoryname\", pm.variables.get(\"regionalCategories\")[1]);",
													"        //Get stores -- inside items and then categories",
													"        const postRequestlistStores = {",
													"            url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"            method: 'POST',",
													"            header: {",
													"                'Content-Type': 'application/json',",
													"                'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"            },",
													"            body: JSON.stringify({",
													"                query: '{searchLocationsOffsetPagination{totalCount,items{id,name}}}'",
													"            })",
													"        };",
													"        pm.sendRequest(postRequestlistStores, (error, response) => {",
													"            listStores = [];",
													"            for (var i = 0; i < response.json().data.searchLocationsOffsetPagination.items.length; i++) {",
													"                listStores.push(response.json().data.searchLocationsOffsetPagination.items[i].id);",
													"                listStores.push(response.json().data.searchLocationsOffsetPagination.items[i].name);",
													"            }",
													"            pm.variables.set(\"stores\", listStores);",
													"            pm.variables.set(\"currentStore\", pm.variables.get(\"stores\")[0]);",
													"            //Assign an item to a category - updateItemsMappingForCategory",
													"            const postRequestassignItemtoCategory = {",
													"                url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"                method: 'POST',",
													"                header: {",
													"                    'Content-Type': 'application/json',",
													"                    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"                },",
													"                body: JSON.stringify({",
													"                    query: 'mutation{updateItemsMappingForCategory(mappings:{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",  sortOrder: 0}){id,categoryId}}'",
													"                })",
													"            };",
													"            pm.sendRequest(postRequestassignItemtoCategory, (error, response) => {",
													"                pm.expect(response.json().data.updateItemsMappingForCategory[0].id).eql(\"00000000-0000-0000-0000-000000000000\");",
													"            })",
													"            //Assign another item to a category - updateItemsMappingForCategory",
													"            const postRequestassignItemtoCategory1 = {",
													"                url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"                method: 'POST',",
													"                header: {",
													"                    'Content-Type': 'application/json',",
													"                    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"                },",
													"                body: JSON.stringify({",
													"                    query: 'mutation{updateItemsMappingForCategory(mappings:{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem1\") + '\",  sortOrder: 0}){id,categoryId}}'",
													"                })",
													"            };",
													"            pm.sendRequest(postRequestassignItemtoCategory1, (error, response) => {",
													"                pm.expect(response.json().data.updateItemsMappingForCategory[0].id).eql(\"00000000-0000-0000-0000-000000000000\");",
													"            })",
													"        })",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Verify Mapping - Item1\", function () {",
													"    let isPresent = false;",
													"    for (var i = 0; i < pm.response.json().data.updateMappingsForStoreItems.length; i++) {",
													"        if(pm.response.json().data.updateMappingsForStoreItems[i].itemId===pm.variables.get(\"currentItem\")){",
													"            isPresent = true;",
													"            break;",
													"        }        ",
													"    }",
													"   pm.expect(isPresent).eql(true);",
													"});",
													"",
													"pm.test(\"Verify Mapping - Item2\", function () {",
													"    let isPresent = false;",
													"    for (var i = 0; i < pm.response.json().data.updateMappingsForStoreItems.length; i++) {",
													"        if(pm.response.json().data.updateMappingsForStoreItems[i].itemId===pm.variables.get(\"currentItem1\")){",
													"            isPresent = true;",
													"            break;",
													"        }        ",
													"    }",
													"   pm.expect(isPresent).eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation{\n    updateMappingsForStoreItems(mapping:{\n            storeId: \"{{currentStore}}\",storeItems:[\"{{currentItem}}\",\"{{currentItem1}}\"]\n    }){\n        itemId\n        categories{\n            id,\n            categoryName\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GetItemsByStoreId",
							"item": [
								{
									"name": "Validations",
									"item": [
										{
											"name": "500 - Invalid store id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `id` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query allItemsByStoreId($id: Uuid!) \n{\n  allItemsByStoreId(storeId: $id)\n  {\n    name\n    itemId\n    categories{\n        categoryName\n    }\n  }\n}",
														"variables": "{\n  \"id\":\"ui7df76e-d582-4e02-88be-ae5192711f89\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - Store id as Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `id` is required.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query allItemsByStoreId($id: Uuid!) \n{\n  allItemsByStoreId(storeId: $id)\n  {\n    name\n    itemId\n    categories{\n        categoryName\n    }\n  }\n}",
														"variables": "{\n  \"id\":null\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - Blank store id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `id` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query allItemsByStoreId($id: Uuid!) \n{\n  allItemsByStoreId(storeId: $id)\n  {\n    name\n    itemId\n    categories{\n        categoryName\n    }\n  }\n}",
														"variables": "{\n  \"id\":\"\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - Store id as special character",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `id` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query allItemsByStoreId($id: Uuid!) \n{\n  allItemsByStoreId(storeId: $id)\n  {\n    name\n    itemId\n    categories{\n        categoryName\n    }\n  }\n}",
														"variables": "{\n  \"id\":\"@#$%^&\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "500 - Store id as string value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Verify error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].message).eql(\"Variable `id` got an invalid value.\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{Alpha_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query allItemsByStoreId($id: Uuid!) \n{\n  allItemsByStoreId(storeId: $id)\n  {\n    name\n    itemId\n    categories{\n        categoryName\n    }\n  }\n}",
														"variables": "{\n  \"id\":\"Test\"\n}"
													}
												},
												"url": {
													"raw": "{{AdminUI_GraphQLAPI_Url}}",
													"host": [
														"{{AdminUI_GraphQLAPI_Url}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "GetItemsByStoreId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json(); ",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate JSON content\", function () {",
													"    pm.expect(jsonData.data.allItemsByStoreId[0].itemId).eql(pm.variables.get(\"currentItem\"));",
													"});",
													"",
													"pm.test(\"Validate JSON structure\", function () {",
													"    pm.expect(jsonData).to.have.all.keys('data');",
													"    pm.expect(jsonData.data).to.have.all.keys('allItemsByStoreId');   ",
													"    pm.expect(jsonData.data.allItemsByStoreId).to.be.an('array');",
													"    pm.expect(jsonData.data.allItemsByStoreId[0]).to.have.all.keys('name','itemId','categories');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Get all the regional items",
													"const postRequestlistItems = {",
													"    url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"    method: 'POST',",
													"    header: {",
													"        'Content-Type': 'application/json',",
													"        'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"    },",
													"    body: JSON.stringify({",
													"        query: '{searchGlobalItems(searchText:\"\"){count,items{name,id}}}'",
													"    })",
													"};",
													"pm.sendRequest(postRequestlistItems, (error, response) => {",
													"    listItems = [];",
													"    for (var i = 0; i < response.json().data.searchGlobalItems.items.length; i++) {",
													"        listItems.push(response.json().data.searchGlobalItems.items[i].id);",
													"    }",
													"    pm.variables.set(\"regionalItemsList\", listItems);",
													"    pm.variables.set(\"currentItem\", pm.variables.get(\"regionalItemsList\")[0]);",
													"    //Get the categories and their items - inside items block",
													"    const postRequestlistCategories = {",
													"        url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"        method: 'POST',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"        },",
													"        body: JSON.stringify({",
													"            query: '{categoryItems{items{id,categoryName,regionalItems{id,name}}}}'",
													"        })",
													"    };",
													"    pm.sendRequest(postRequestlistCategories, (error, response) => {",
													"        listCategories = [];",
													"        for (var i = 0; i < response.json().data.categoryItems.items.length; i++) {",
													"            listCategories.push(response.json().data.categoryItems.items[i].id);",
													"            listCategories.push(response.json().data.categoryItems.items[i].categoryName);",
													"        }",
													"        pm.variables.set(\"regionalCategories\", listCategories);",
													"        pm.variables.set(\"currentCategory\", pm.variables.get(\"regionalCategories\")[0]);",
													"        pm.variables.set(\"currentCategoryname\", pm.variables.get(\"regionalCategories\")[1]);",
													"        //Get stores -- inside items and then categories",
													"        const postRequestlistStores = {",
													"            url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"            method: 'POST',",
													"            header: {",
													"                'Content-Type': 'application/json',",
													"                'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"            },",
													"            body: JSON.stringify({",
													"                query: '{searchLocationsOffsetPagination{totalCount,items{id,name}}}'",
													"            })",
													"        };",
													"        pm.sendRequest(postRequestlistStores, (error, response) => {",
													"            listStores = [];",
													"            for (var i = 0; i < response.json().data.searchLocationsOffsetPagination.items.length; i++) {",
													"                listStores.push(response.json().data.searchLocationsOffsetPagination.items[i].id);",
													"                listStores.push(response.json().data.searchLocationsOffsetPagination.items[i].name);",
													"            }",
													"            pm.variables.set(\"stores\", listStores);",
													"            pm.variables.set(\"currentStore\", pm.variables.get(\"stores\")[0]);",
													"            //Assign an item to a category - updateItemsMappingForCategory",
													"            const postRequestassignItemtoCategory = {",
													"                url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"                method: 'POST',",
													"                header: {",
													"                    'Content-Type': 'application/json',",
													"                    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"                },",
													"                body: JSON.stringify({",
													"                    query: 'mutation{updateItemsMappingForCategory(mappings:{categoryId: \"' + pm.variables.get(\"currentCategory\") + '\",id: \"00000000-0000-0000-0000-000000000000\",regionalItemId: \"' + pm.variables.get(\"currentItem\") + '\",  sortOrder: 0}){id,categoryId}}'",
													"                })",
													"            };",
													"            pm.sendRequest(postRequestassignItemtoCategory, (error, response) => {",
													"                pm.expect(response.json().data.updateItemsMappingForCategory[0].id).eql(\"00000000-0000-0000-0000-000000000000\");",
													"                const postRequestupdateMappingForStoreItems = {",
													"                    url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
													"                    method: 'POST',",
													"                    header: {",
													"                        'Content-Type': 'application/json',",
													"                        'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
													"                    },",
													"                    body: JSON.stringify({",
													"                        query: 'mutation{updateMappingsForStoreItems(mapping:{storeId: \"' + pm.variables.get(\"currentStore\") + '\",storeItems:{itemId: \"' + pm.variables.get(\"currentItem\") + '\",locationId: \"' + pm.variables.get(\"currentStore\") + '\",isEnabled: true}}){itemId,categories{id,categoryName}}}'",
													"                    })",
													"                };",
													"                pm.sendRequest(postRequestupdateMappingForStoreItems, (error, response) => {",
													"                    pm.expect(response.json().data.updateMappingsForStoreItems[0].itemId).eql(pm.variables.get(\"currentItem\"));",
													"                })",
													"            })",
													"        })",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query allItemsByStoreId($id: Uuid!) \n{\n  allItemsByStoreId(storeId: $id)\n  {\n    name\n    itemId\n    categories{\n        categoryName\n    }\n  }\n}",
												"variables": "{\n    \"id\":\"{{currentStore}}\"\n}"
											}
										},
										"url": {
											"raw": "{{AdminUI_GraphQLAPI_Url}}",
											"host": [
												"{{AdminUI_GraphQLAPI_Url}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var modName = \"ModName\" + Math.floor((Math.random()*(9990+1))+1000);",
							"pm.variables.set(\"modName\", modName);",
							"",
							"//Retrieve POS Ids into variables",
							"const postRequest = {",
							"  url: pm.environment.get(\"AdminUI_GraphQLAPI_Url\"),",
							"  method: 'POST',",
							"  header: {",
							"    'Content-Type': 'application/json',",
							"    'Authorization': `Bearer ${pm.environment.get('AdminUI_BearerToken')}`",
							"  },",
							"  body: JSON.stringify({query: 'query {posSystems{id}}'})",
							"};",
							"pm.sendRequest(postRequest, (error, response) => {",
							"    pm.environment.set(\"POSId1\", response.json().data.posSystems[0].id);",
							"    pm.environment.set(\"POSId2\", response.json().data.posSystems[1].id);",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "LotW",
			"item": [
				{
					"name": "Locations",
					"item": [
						{
							"name": "Permissions",
							"item": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AdminUI_BearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"    const postRequest = {",
					"    url: pm.environment.get(\"AdminUI_auth_URL\"),",
					"    method: 'POST',",
					"    header: {",
					"        'content-type': 'application/json'",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded : [",
					"        { key: 'client_id', value: pm.environment.get(\"AdminUI_Client_Id\")},",
					"        { key: 'client_secret', value: pm.environment.get(\"AdminUI_Client_Secret\")},",
					"        { key: 'scope', value: pm.environment.get(\"AdminUI_scope\")},",
					"        { key: 'grant_type', value: 'password'},",
					"        { key: 'username', value: pm.environment.get(\"AdminUI_SuperUser_UserName\")},",
					"        { key: 'password', value: pm.environment.get(\"AdminUI_SuperUser_Password\")}",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(postRequest, (error, response) => {",
					"    pm.environment.set(\"AdminUI_BearerToken\", response.json().access_token);",
					"    pm.environment.set(\"AdminUI_authorization\", \"Bearer \" + response.json().access_token);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
